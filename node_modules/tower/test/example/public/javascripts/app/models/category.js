var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.Category = (function(_super) {

  __extends(Category, _super);

  Category.name = 'Category';

  function Category() {
    return Category.__super__.constructor.apply(this, arguments);
  }

  Category.hasMany("children", {
    type: "Category",
    foreignKey: "parentId"
  });

  Category.belongsTo("parent", {
    type: "Category",
    foreignKey: "parentId"
  });

  Category.belongsTo("categorizable", {
    embed: true,
    polymorphic: true
  });

  return Category;

})(Tower.Model);
