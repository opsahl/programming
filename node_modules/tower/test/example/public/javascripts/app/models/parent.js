var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.Parent = (function(_super) {

  __extends(Parent, _super);

  Parent.name = 'Parent';

  function Parent() {
    return Parent.__super__.constructor.apply(this, arguments);
  }

  Parent.hasMany("child", {
    cache: true,
    counterCache: true
  });

  Parent.hasMany("embeddedChildren", {
    embed: true,
    type: "Child",
    inverseOf: "embeddableParent"
  });

  Parent.hasMany("noInverse_noInverse", {
    type: "Child"
  });

  Parent.hasMany("noInverse_withInverse", {
    type: "Child"
  });

  Parent.hasMany("withInverse_withInverse", {
    type: "Child",
    inverseOf: "withInverse_withInverse"
  });

  Parent.hasMany("withInverse_noInverse", {
    type: "Child",
    inverseOf: "noInverse_withInverse"
  });

  Parent.hasMany("idCacheTrue_idCacheFalse", {
    type: "Child",
    idCache: true,
    inverseOf: "idCacheFalse_idCacheTrue"
  });

  Parent.hasMany("idCacheFalse_idCacheTrue", {
    type: "Child",
    inverseOf: "idCacheTrue_idCacheFalse"
  });

  return Parent;

})(Tower.Model);
