var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.Validatable = (function(_super) {

  __extends(Validatable, _super);

  Validatable.name = 'Validatable';

  function Validatable() {
    return Validatable.__super__.constructor.apply(this, arguments);
  }

  Validatable.field('string_requiredTrue', {
    required: true
  });

  Validatable.field('string_presenceTrue');

  Validatable.validates('string_presenceTrue', {
    presence: true
  });

  Validatable.field('string_format_a_z', {
    format: /^[a-z]/
  });

  Validatable.field('string_formatEmail', {
    format: 'email'
  });

  Validatable.field('string_formatPhone', {
    format: 'phone'
  });

  Validatable.field('string_formatSlug', {
    format: 'slug'
  });

  Validatable.field('string_formatCreditCard', {
    format: 'creditCard'
  });

  Validatable.field('string_formatPostalCode', {
    format: 'postalCode'
  });

  Validatable.field('string_format_withOption', {
    format: {
      value: /^\d+$/
    }
  });

  Validatable.field('date_gte', {
    type: 'Date',
    '>=': function() {
      return _(20).days().ago().toDate();
    }
  });

  Validatable.field('date_gt', {
    type: 'Date',
    '>': function() {
      return _(20).days().ago().toDate();
    }
  });

  Validatable.field('date_lte', {
    type: 'Date',
    '<=': function() {
      return _(20).days().ago().toDate();
    }
  });

  Validatable.field('date_lt', {
    type: 'Date',
    '<': function() {
      return _(20).days().ago().toDate();
    }
  });

  Validatable.field('integer_min', {
    type: 'Integer',
    min: 5
  });

  Validatable.field('integer_max', {
    type: 'Integer',
    max: 12
  });

  Validatable.field('integer_minFunction', {
    type: 'Integer',
    min: function() {
      return 5;
    }
  });

  Validatable.field('string_in', {
    "in": ['male', 'female']
  });

  Validatable.field('string_notIn', {
    notIn: ['male', 'female']
  });

  Validatable.field('onCreate_all1');

  Validatable.field('onCreate_all2');

  Validatable.validates('onCreate_all1', 'onCreate_all2', {
    presence: true,
    format: /^[a-z]+$/,
    on: "create"
  });

  Validatable.field('onCreate_one1');

  Validatable.field('onCreate_one2');

  Validatable.validates('onCreate_one1', 'onCreate_one2', {
    presence: true,
    format: {
      value: /^[a-z]+$/,
      on: "create"
    }
  });

  Validatable.field('if_and_unless1');

  Validatable.field('if_and_unless2');

  Validatable.validates('if_and_unless1', 'if_and_unless2', {
    presence: {
      "if": 'ifAndUnlessPresenceCheck'
    },
    format: {
      value: /^[a-z]+$/,
      on: "create",
      unless: 'ifAndUnlessFormatCheck'
    }
  });

  Validatable.prototype.ifAndUnlessPresenceCheck = function() {
    return this._ifAndUnlessPresenceCheck;
  };

  Validatable.prototype.ifAndUnlessFormatCheck = function() {
    return this._ifAndUnlessFormatCheck;
  };

  Validatable.field('if_global1');

  Validatable.field('if_global2');

  Validatable.validates('if_global1', 'if_global2', {
    presence: true,
    format: /^[a-z]+$/,
    "if": 'ifGlobal'
  });

  Validatable.prototype.ifGlobal = function() {
    return this._ifGlobal;
  };

  return Validatable;

})(Tower.Model);
