var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.BaseModel = (function(_super) {

  __extends(BaseModel, _super);

  BaseModel.name = 'BaseModel';

  function BaseModel() {
    return BaseModel.__super__.constructor.apply(this, arguments);
  }

  BaseModel.field("likeCountWithoutDefault", {
    type: "Integer"
  });

  BaseModel.field("likeCountWithDefault", {
    type: "Integer",
    "default": 0
  });

  BaseModel.field("tags", {
    type: "Array",
    "default": []
  });

  BaseModel.field("title");

  BaseModel.field("nestedModels", {
    type: ["NestedModel"],
    "default": []
  });

  BaseModel.field("favorite", {
    type: "Boolean",
    "default": false
  });

  BaseModel.field("likeCount", {
    type: "Integer",
    "default": 0
  });

  BaseModel.field("custom", {
    get: function(value) {
      if (value) {
        return value.join("-");
      }
    },
    set: function(value) {
      return _.castArray(value);
    }
  });

  BaseModel.fields("a1", "a2", "a3");

  BaseModel.fields("a4", "a5", "a6", {
    type: "Integer"
  });

  BaseModel.fields({
    o1: "String",
    o2: "Integer"
  });

  BaseModel["default"]("scope", {
    title: "ABC"
  });

  return BaseModel;

})(Tower.Model);

App.NestedModel = (function(_super) {

  __extends(NestedModel, _super);

  NestedModel.name = 'NestedModel';

  function NestedModel() {
    return NestedModel.__super__.constructor.apply(this, arguments);
  }

  return NestedModel;

})(Tower.Model);
