var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.User = (function(_super) {

  __extends(User, _super);

  User.name = 'User';

  function User() {
    return User.__super__.constructor.apply(this, arguments);
  }

  User.field("firstName");

  User.field("createdAt", {
    type: "Time",
    "default": function() {
      return new Date();
    }
  });

  User.field("likes", {
    type: "Integer",
    "default": 0
  });

  User.field("tags", {
    type: ["Array"],
    "default": []
  });

  User.field("admin", {
    type: "Boolean",
    "default": false
  });

  User.field("rating", {
    type: "Float",
    "default": 2.5
  });

  User.scope("byBaldwin", {
    firstName: {
      "=~": "Baldwin"
    }
  });

  User.scope("thisWeek", User.where({
    createdAt: {
      ">=": function() {
        return require('moment')().subtract('days', 7);
      }
    }
  }));

  User.hasMany("posts", {
    type: "Page",
    idCache: true
  });

  User.hasMany("comments", {
    source: "commenter"
  });

  User.hasMany("memberships");

  User.hasMany("groups", {
    through: "memberships"
  });

  User.hasMany("polymorphicMemberships", {
    as: "joinable",
    type: "Membership"
  });

  User.hasMany("cachedMemberships", {
    type: "Membership",
    idCache: true
  });

  User.validates("firstName", {
    presence: true
  });

  User.timestamps();

  return User;

})(Tower.Model);

App.Admin = (function(_super) {

  __extends(Admin, _super);

  Admin.name = 'Admin';

  function Admin() {
    return Admin.__super__.constructor.apply(this, arguments);
  }

  Admin.scope("subclassNamedScope", {
    likes: {
      ">": 0
    }
  });

  return Admin;

})(App.User);
