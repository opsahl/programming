var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.Child = (function(_super) {

  __extends(Child, _super);

  Child.name = 'Child';

  function Child() {
    return Child.__super__.constructor.apply(this, arguments);
  }

  Child.field("value");

  Child.hasMany("parents");

  Child.belongsTo("embeddableParent", {
    embed: true,
    type: "Parent",
    inverseOf: "embeddedChildren"
  });

  Child.belongsTo("noInverse_noInverse", {
    type: "Parent"
  });

  Child.belongsTo("noInverse_withInverse", {
    type: "Parent"
  });

  Child.belongsTo("withInverse_withInverse", {
    type: "Parent",
    inverseOf: "withInverse_withInverse"
  });

  Child.belongsTo("withInverse_noInverse", {
    type: "Parent",
    inverseOf: "noInverse_withInverse"
  });

  Child.hasMany("idCacheTrue_idCacheFalse", {
    type: "Parent",
    idCache: true,
    inverseOf: "idCacheFalse_idCacheTrue"
  });

  Child.hasMany("idCacheFalse_idCacheTrue", {
    type: "Parent",
    inverseOf: "idCacheTrue_idCacheFalse"
  });

  return Child;

})(Tower.Model);
