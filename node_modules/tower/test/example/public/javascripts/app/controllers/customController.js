var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

App.CustomController = (function(_super) {

  __extends(CustomController, _super);

  CustomController.name = 'CustomController';

  function CustomController() {
    return CustomController.__super__.constructor.apply(this, arguments);
  }

  CustomController.layout(false);

  CustomController.respondTo("html", "json", "yaml");

  CustomController.before("setCurrentUser");

  CustomController.resource({
    type: "App.User"
  });

  CustomController.beforeAction("testOnlyCallback", {
    only: ['testCreateCallback', 'testUpdateCallback']
  });

  CustomController.beforeAction("testExceptCallback", {
    except: 'testNoCallback'
  });

  CustomController.prototype.testOnlyCallback = function() {
    return this.testOnlyCallbackCalled = true;
  };

  CustomController.prototype.testExceptCallback = function() {
    return this.testExceptCallbackCalled = true;
  };

  CustomController.prototype.testCreateCallback = function() {
    this.testCreateCallbackCalled = true;
    return this.render({
      text: 'testCreateCallback!'
    });
  };

  CustomController.prototype.testUpdateCallback = function() {
    this.testUpdateCallbackCalled = true;
    return this.render({
      text: 'testUpdateCallback!'
    });
  };

  CustomController.prototype.testNoCallback = function() {
    this.testNoCallbackCalled = true;
    return this.render({
      text: 'testNoCallback!'
    });
  };

  CustomController.prototype.renderUser = function() {};

  CustomController.prototype.renderCoffeeKupFromTemplate = function() {
    return this.render('index');
  };

  CustomController.prototype.renderCoffeeKupInline = function() {
    this.self = "I'm";
    return this.render(function() {
      return h1("" + this.self + " Inline!");
    });
  };

  CustomController.prototype.setCurrentUser = function(callback) {
    this.currentUser = {
      name: "Lance"
    };
    return callback(null, true);
  };

  CustomController.prototype.helloWorld = function() {};

  CustomController.prototype.helloWorldFile = function() {
    return this.render({
      file: "" + Tower.root + "/test-app/app/views/files/hello",
      formats: ["html"]
    });
  };

  CustomController.prototype.conditionalHello = function() {
    if (this.isStale({
      lastModified: Time.now.utc.beginningOfDay,
      etag: ["foo", 123]
    })) {
      return this.render({
        action: 'helloWorld'
      });
    }
  };

  CustomController.prototype.conditionalHelloWithRecord = function() {
    var record;
    record = Struct["new"]("updatedAt", "cacheKey")["new"](Time.now.utc.beginningOfDay, "foo/123");
    if (typeof stale === "function" ? stale(record) : void 0) {
      return this.render({
        action: 'helloWorld'
      });
    }
  };

  CustomController.prototype.conditionalHelloWithPublicHeader = function() {
    if (typeof stale === "function" ? stale({
      lastModified: Time.now.utc.beginningOfDay,
      etag: ["foo", 123],
      "public": true
    }) : void 0) {
      return this.render({
        action: 'helloWorld'
      });
    }
  };

  CustomController.prototype.conditionalHelloWithPublicHeaderWithRecord = function() {
    var record;
    record = Struct["new"]("updatedAt", "cacheKey")["new"](Time.now.utc.beginningOfDay, "foo/123");
    if (typeof stale === "function" ? stale(record, {
      "public": true
    }) : void 0) {
      return this.render({
        action: 'helloWorld'
      });
    }
  };

  CustomController.prototype.conditionalHelloWithPublicHeaderAndExpiresAt = function() {
    expiresIn(1..minute);
    if (typeof stale === "function" ? stale({
      lastModified: Time.now.utc.beginningOfDay,
      etag: ["foo", 123],
      "public": true
    }) : void 0) {
      return this.render({
        action: 'helloWorld'
      });
    }
  };

  CustomController.prototype.conditionalHelloWithExpiresIn = function() {
    expiresIn(60.1.seconds);
    return this.render({
      action: 'helloWorld'
    });
  };

  CustomController.prototype.conditionalHelloWithExpiresInWithPublic = function() {
    expiresIn(1..minute, {
      "public": true
    });
    return this.render({
      action: 'helloWorld'
    });
  };

  CustomController.prototype.conditionalHelloWithExpiresInWithPublicWithMoreKeys = function() {
    expiresIn(1..minute, {
      "public": true,
      'max-stale': 5..hours
    });
    return this.render({
      action: 'helloWorld'
    });
  };

  CustomController.prototype.conditionalHelloWithExpiresInWithPublicWithMoreKeysOldSyntax = function() {
    expiresIn(1..minute, {
      "public": true,
      "private": null,
      'max-stale': 5..hours
    });
    return this.render({
      action: 'helloWorld'
    });
  };

  CustomController.prototype.conditionalHelloWithExpiresNow = function() {
    expiresNow;
    return this.render({
      action: 'helloWorld'
    });
  };

  CustomController.prototype.conditionalHelloWithBangs = function() {
    this.render({
      action: 'helloWorld'
    });
    return beforeFilter("handleLastModifiedAndEtags", {
      "only": "conditionalHelloWithBangs"
    });
  };

  CustomController.prototype.handleLastModifiedAndEtags = function() {
    return this.freshWhen({
      lastModified: Time.now.utc.beginningOfDay,
      etag: ["foo", 123]
    });
  };

  CustomController.prototype.renderHelloWorld = function() {
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.renderHelloWorldWithLastModifiedSet = function() {
    response.lastModified = Date["new"](2008, 10, 10).toTime;
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.renderHelloWorldWithForwardSlash = function() {
    return this.render({
      template: "/test/helloWorld"
    });
  };

  CustomController.prototype.renderTemplateInTopDirectory = function() {
    return this.render({
      template: 'shared'
    });
  };

  CustomController.prototype.renderHelloWorldFromVariable = function() {
    this.person = "david";
    return this.render({
      text: "hello " + this.person
    });
  };

  CustomController.prototype.renderActionHelloWorld = function() {
    return this.render({
      action: "helloWorld"
    });
  };

  CustomController.prototype.renderActionUpcasedHelloWorld = function() {
    return this.render({
      action: "HelloWorld"
    });
  };

  CustomController.prototype.renderActionHelloWorldAsString = function() {
    return this.render("helloWorld");
  };

  CustomController.prototype.renderActionUpcasedHelloWorldAsString = function() {
    return this.render("HelloWorld");
  };

  CustomController.prototype.renderActionHelloWorldWithSymbol = function() {
    return this.render({
      action: "helloWorld"
    });
  };

  CustomController.prototype.renderTextHelloWorld = function() {
    return this.render({
      text: "hello world"
    });
  };

  CustomController.prototype.renderTextHelloWorldWithLayout = function() {
    this.variableForLayout = ", I'm here!";
    return this.render({
      text: "hello world",
      layout: true
    });
  };

  CustomController.prototype.helloWorldWithLayoutFalse = function() {
    return this.render({
      layout: false
    });
  };

  CustomController.prototype.renderFileWithInstanceVariables = function() {
    var path;
    this.secret = 'in the sauce';
    path = File.join(File.dirname(__FILE__), '../fixtures/test/renderFileWithIvar');
    return this.render({
      file: path
    });
  };

  CustomController.prototype.renderFileAsStringWithInstanceVariables = function() {
    var path;
    this.secret = 'in the sauce';
    path = File.expandPath(File.join(File.dirname(__FILE__), '../fixtures/test/renderFileWithIvar'));
    return this.render(path);
  };

  CustomController.prototype.renderFileNotUsingFullPath = function() {
    this.secret = 'in the sauce';
    return this.render({
      file: 'test/renderFileWithIvar'
    });
  };

  CustomController.prototype.renderFileNotUsingFullPathWithDotInPath = function() {
    this.secret = 'in the sauce';
    return this.render({
      file: 'test/dot.directory/renderFileWithIvar'
    });
  };

  CustomController.prototype.renderFileUsingPathname = function() {
    this.secret = 'in the sauce';
    return this.render({
      file: Pathname["new"](File.dirname(__FILE__)).join('..', 'fixtures', 'test', 'dot.directory', 'renderFileWithIvar')
    });
  };

  CustomController.prototype.renderFileFromTemplate = function() {
    this.secret = 'in the sauce';
    return this.path = File.expandPath(File.join(File.dirname(__FILE__), '../fixtures/test/renderFileWithIvar'));
  };

  CustomController.prototype.renderFileWithLocals = function() {
    var path;
    path = File.join(File.dirname(__FILE__), '../fixtures/test/renderFileWithLocals');
    return this.render({
      file: path,
      locals: {
        secret: 'in the sauce'
      }
    });
  };

  CustomController.prototype.renderFileAsStringWithLocals = function() {
    var path;
    path = File.expandPath(File.join(File.dirname(__FILE__), '../fixtures/test/renderFileWithLocals'));
    return this.render(path, {
      locals: {
        secret: 'in the sauce'
      }
    });
  };

  CustomController.prototype.accessingRequestInTemplate = function() {
    return this.render({
      inline: "Hello: <%= request.host %>"
    });
  };

  CustomController.prototype.accessingLoggerInTemplate = function() {
    return this.render({
      inline: "<%= logger.class %>"
    });
  };

  CustomController.prototype.accessingActionNameInTemplate = function() {
    return this.render({
      inline: "<%= actionName %>"
    });
  };

  CustomController.prototype.accessingControllerNameInTemplate = function() {
    return this.render({
      inline: "<%= controllerName %>"
    });
  };

  CustomController.prototype.renderCustomCode = function() {
    return this.render({
      text: "hello world",
      status: 404
    });
  };

  CustomController.prototype.renderTextWithNull = function() {
    return this.render({
      text: null
    });
  };

  CustomController.prototype.renderTextWithFalse = function() {
    return this.render({
      text: false
    });
  };

  CustomController.prototype.renderTextWithResource = function() {
    return this.render({
      text: Customer["new"]("David")
    });
  };

  CustomController.prototype.renderNothingWithAppendix = function() {
    return this.render({
      text: "appended"
    });
  };

  CustomController.prototype.renderLineOffset = function() {
    return this.render({
      inline: '<% raise %>',
      locals: {
        foo: 'bar'
      }
    });
  };

  CustomController.prototype.heading = function() {
    return this.head("ok");
  };

  CustomController.prototype.greeting = function() {};

  CustomController.prototype.blankResponse = function() {
    return this.render({
      text: ' '
    });
  };

  CustomController.prototype.layoutTest = function() {
    return this.render({
      action: "helloWorld"
    });
  };

  CustomController.prototype.builderLayoutTest = function() {
    this.name = null;
    return this.render({
      action: "hello",
      layout: "layouts/builder"
    });
  };

  CustomController.prototype.builderPartialTest = function() {
    return this.render({
      action: "helloWorldContainer"
    });
  };

  CustomController.prototype.partialsList = function() {
    this.testUnchanged = 'hello';
    this.customers = [Customer["new"]("david"), Customer["new"]("mary")];
    return this.render({
      action: "list"
    });
  };

  CustomController.prototype.partialOnly = function() {
    return this.render({
      partial: true
    });
  };

  CustomController.prototype.helloInA_string = function() {
    this.customers = [Customer["new"]("david"), Customer["new"]("mary")];
    return this.render({
      text: "How's there? " + renderToString({
        template: "test/list"
      })
    });
  };

  CustomController.prototype.accessingParamsInTemplate = function() {
    return this.render({
      inline: 'Hello: <%= params["name"] %>'
    });
  };

  CustomController.prototype.accessingLocalAssignsInInlineTemplate = function() {
    var name;
    name = params["localName"];
    return this.render({
      inline: "<%= 'Goodbye, ' + localName %>"
    }, {
      locals: {
        localName: name
      }
    });
  };

  CustomController.prototype.renderImplicitHtmlTemplateFromXhrRequest = function() {};

  CustomController.prototype.renderImplicitJsTemplateWithoutLayout = function() {};

  CustomController.prototype.formattedHtmlErb = function() {};

  CustomController.prototype.formattedXmlErb = function() {};

  CustomController.prototype.renderToStringTest = function() {
    return this.foo = renderToString({
      inline: "this is a test"
    });
  };

  CustomController.prototype.defaultRender = function() {
    this.alternateDefaultRender || (this.alternateDefaultRender = null);
    if (this.alternateDefaultRender) {
      return this.alternateDefaultRender.call;
    } else {
      return CustomController.__super__.defaultRender.apply(this, arguments);
    }
  };

  CustomController.prototype.renderActionHelloWorldAsSymbol = function() {
    return this.render({
      action: "helloWorld"
    });
  };

  CustomController.prototype.layoutTestWithDifferentLayout = function() {
    return this.render({
      action: "helloWorld",
      layout: "standard"
    });
  };

  CustomController.prototype.layoutTestWithDifferentLayoutAndStringAction = function() {
    return this.render("helloWorld", {
      layout: "standard"
    });
  };

  CustomController.prototype.layoutTestWithDifferentLayoutAndSymbolAction = function() {
    return this.render("helloWorld", {
      layout: "standard"
    });
  };

  CustomController.prototype.renderingWithoutLayout = function() {
    return this.render({
      action: "helloWorld",
      layout: false
    });
  };

  CustomController.prototype.layoutOverridingLayout = function() {
    return this.render({
      action: "helloWorld",
      layout: "standard"
    });
  };

  CustomController.prototype.renderingNothingOnLayout = function() {
    return this.render({
      nothing: true
    });
  };

  CustomController.prototype.renderToStringWithAssigns = function() {
    this.before = "i'm before the render";
    renderToString({
      text: "foo"
    });
    this.after = "i'm after the render";
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.renderToStringWithException = function() {
    return renderToString({
      file: "exception that will not be caught - this will certainly not work"
    });
  };

  CustomController.prototype.renderToStringWithCaughtException = function() {
    this.before = "i'm before the render";
    try {
      renderToString({
        file: "exception that will be caught- hope my future instance vars still work!"
      });
    } catch (error) {
      this.after = "i'm after the render";
    }
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.accessingParamsInTemplateWithLayout = function() {
    return this.render({
      layout: true,
      inline: 'Hello: <%= params["name"] %>'
    });
  };

  CustomController.prototype.renderWithExplicitTemplate = function() {
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.renderWithExplicitUnescapedTemplate = function() {
    return this.render({
      template: "test/h*lloWorld"
    });
  };

  CustomController.prototype.renderWithExplicitEscapedTemplate = function() {
    return this.render({
      template: "test/hello,world"
    });
  };

  CustomController.prototype.renderWithExplicitStringTemplate = function() {
    return this.render("test/helloWorld");
  };

  CustomController.prototype.renderWithExplicitStringTemplateAsAction = function() {
    return this.render("helloWorld");
  };

  CustomController.prototype.renderWithExplicitTemplateWithLocals = function() {
    return this.render({
      template: "test/renderFileWithLocals",
      locals: {
        secret: 'area51'
      }
    });
  };

  CustomController.prototype.doubleRender = function() {
    this.render({
      text: "hello"
    });
    return this.render({
      text: "world"
    });
  };

  CustomController.prototype.doubleRedirect = function() {
    this.redirectTo({
      action: "doubleRender"
    });
    return this.redirectTo({
      action: "doubleRender"
    });
  };

  CustomController.prototype.renderAndRedirect = function() {
    this.render({
      text: "hello"
    });
    return redirectTo({
      action: "doubleRender"
    });
  };

  CustomController.prototype.renderToStringAndRender = function() {
    this.stuff = renderToString({
      text: "here is some cached stuff"
    });
    return this.render({
      text: "Hi web users! " + this.stuff
    });
  };

  CustomController.prototype.renderToStringWithInlineAndRender = function() {
    renderToString({
      inline: "<%= 'dlrow olleh'.reverse %>"
    });
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.renderingWithConflictingLocalVars = function() {
    this.name = "David";
    return this.render({
      action: "potentialConflicts"
    });
  };

  CustomController.prototype.helloWorldFromRxmlUsingAction = function() {
    return this.render({
      action: "helloWorldFromRxml",
      handlers: ["builder"]
    });
  };

  CustomController.prototype.helloWorldFromRxmlUsingTemplate = function() {
    return this.render({
      template: "test/helloWorldFromRxml",
      handlers: ["builder"]
    });
  };

  CustomController.prototype.actionTalkToLayout = function() {};

  CustomController.prototype.renderTextWithAssigns = function() {
    this.hello = "world";
    return this.render({
      text: "foo"
    });
  };

  CustomController.prototype.yieldContentFor = function() {
    return this.render({
      action: "contentFor",
      layout: "yield"
    });
  };

  CustomController.prototype.renderContentTypeFromBody = function() {
    response.contentType = {
      Mime: "RSS"
    };
    return this.render({
      text: "hello world!"
    });
  };

  CustomController.prototype.headWithLocationHeader = function() {
    return head({
      location: "/foo"
    });
  };

  CustomController.prototype.headWithLocationObject = function() {
    return head({
      location: Customer["new"]("david", 1)
    });
  };

  CustomController.prototype.headWithSymbolicStatus = function() {
    return head({
      status: params["status"].intern
    });
  };

  CustomController.prototype.headWithIntegerStatus = function() {
    return head({
      status: params["status"].toI
    });
  };

  CustomController.prototype.headWithStringStatus = function() {
    return head({
      status: params["status"]
    });
  };

  CustomController.prototype.headWithCustomHeader = function() {
    return head({
      xCustomHeader: "something"
    });
  };

  CustomController.prototype.headWithWwwAuthenticateHeader = function() {
    return head({
      'WWW-Authenticate': 'something'
    });
  };

  CustomController.prototype.headWithStatusCodeFirst = function() {
    return head("forbidden", {
      xCustomHeader: "something"
    });
  };

  CustomController.prototype.renderUsingLayoutAroundBlock = function() {
    return this.render({
      action: "usingLayoutAroundBlock"
    });
  };

  CustomController.prototype.renderUsingLayoutAroundBlockInMainLayoutAndWithinContentForLayout = function() {
    return this.render({
      action: "usingLayoutAroundBlock",
      layout: "layouts/blockWithLayout"
    });
  };

  CustomController.prototype.partialFormatsHtml = function() {
    return this.render({
      partial: 'partial',
      formats: ["html"]
    });
  };

  CustomController.prototype.partial = function() {
    return this.render({
      partial: 'partial'
    });
  };

  CustomController.prototype.renderToStringWithPartial = function() {
    this.partialOnly = renderToString({
      partial: "partialOnly"
    });
    this.partialWithLocals = renderToString({
      partial: "customer",
      locals: {
        customer: Customer["new"]("david")
      }
    });
    return this.render({
      template: "test/helloWorld"
    });
  };

  CustomController.prototype.partialWithCounter = function() {
    return this.render({
      partial: "counter",
      locals: {
        counterCounter: 5
      }
    });
  };

  CustomController.prototype.partialWithLocals = function() {
    return this.render({
      partial: "customer",
      locals: {
        customer: Customer["new"]("david")
      }
    });
  };

  CustomController.prototype.partialWithFormBuilder = function() {
    return this.render({
      partial: {
        ActionView: {
          "Helpers": "FormBuilder"["new"]("post", null, viewContext, {}, Proc["new"]({}))
        }
      }
    });
  };

  CustomController.prototype.partialWithFormBuilderSubclass = function() {
    return this.render({
      partial: LabellingFormBuilder["new"]("post", null, viewContext, {}, Proc["new"]({}))
    });
  };

  CustomController.prototype.partialCollection = function() {
    return this.render({
      partial: "customer",
      collection: [Customer["new"]("david"), Customer["new"]("mary")]
    });
  };

  CustomController.prototype.partialCollectionWithAs = function() {
    return this.render({
      partial: "customerWithVar",
      collection: [Customer["new"]("david"), Customer["new"]("mary")],
      as: "customer"
    });
  };

  CustomController.prototype.partialCollectionWithCounter = function() {
    return this.render({
      partial: "customerCounter",
      collection: [Customer["new"]("david"), Customer["new"]("mary")]
    });
  };

  CustomController.prototype.partialCollectionWithAsAndCounter = function() {
    return this.render({
      partial: "customerCounterWithAs",
      collection: [Customer["new"]("david"), Customer["new"]("mary")],
      as: "client"
    });
  };

  CustomController.prototype.partialCollectionWithLocals = function() {
    return this.render({
      partial: "customerGreeting",
      collection: [Customer["new"]("david"), Customer["new"]("mary")],
      locals: {
        greeting: "Bonjour"
      }
    });
  };

  CustomController.prototype.partialCollectionWithSpacer = function() {
    return this.render({
      partial: "customer",
      spacerTemplate: "partialOnly",
      collection: [Customer["new"]("david"), Customer["new"]("mary")]
    });
  };

  CustomController.prototype.partialCollectionShorthandWithLocals = function() {
    return this.render({
      partial: [Customer["new"]("david"), Customer["new"]("mary")],
      locals: {
        greeting: "Bonjour"
      }
    });
  };

  CustomController.prototype.partialCollectionShorthandWithDifferentTypesOfRecords = function() {
    return this.render({
      partial: [BadCustomer["new"]("mark"), GoodCustomer["new"]("craig"), BadCustomer["new"]("john"), GoodCustomer["new"]("zach"), GoodCustomer["new"]("brandon"), BadCustomer["new"]("dan")]
    }, {
      locals: {
        greeting: "Bonjour"
      }
    });
  };

  CustomController.prototype.emptyPartialCollection = function() {
    return this.render({
      partial: "customer",
      collection: []
    });
  };

  CustomController.prototype.partialCollectionShorthandWithDifferentTypesOfRecordsWithCounter = function() {
    return partialCollectionShorthandWithDifferentTypesOfRecords;
  };

  CustomController.prototype.missingPartial = function() {
    return this.render({
      partial: 'thisFileIsntHere'
    });
  };

  CustomController.prototype.partialWithHashObject = function() {
    return this.render({
      partial: "hashObject",
      object: {
        firstName: "Sam"
      }
    });
  };

  CustomController.prototype.partialWithNestedObject = function() {
    return this.render({
      partial: "quiz/questions/question",
      object: {
        Quiz: "Question"["new"]("first")
      }
    });
  };

  CustomController.prototype.partialWithNestedObjectShorthand = function() {
    return this.render({
      Quiz: "Question"["new"]("first")
    });
  };

  CustomController.prototype.partialHashCollection = function() {
    return this.render({
      partial: "hashObject",
      collection: [
        {
          firstName: "Pratik"
        }, {
          firstName: "Amy"
        }
      ]
    });
  };

  CustomController.prototype.partialHashCollectionWithLocals = function() {
    return this.render({
      partial: "hashGreeting",
      collection: [
        {
          firstName: "Pratik"
        }, {
          firstName: "Amy"
        }
      ],
      locals: {
        greeting: "Hola"
      }
    });
  };

  CustomController.prototype.partialWithImplicitLocalAssignment = function() {
    this.customer = Customer["new"]("Marcel");
    return this.render({
      partial: "customer"
    });
  };

  CustomController.prototype.renderCallToPartialWithLayout = function() {
    return this.render({
      action: "callingPartialWithLayout"
    });
  };

  CustomController.prototype.renderCallToPartialWithLayoutInMainLayoutAndWithinContentForLayout = function() {
    return this.render({
      action: "callingPartialWithLayout",
      layout: "layouts/partialWithLayout"
    });
  };

  CustomController.prototype.renderWithFilters = function() {
    return this.render({
      action: "formattedXmlErb"
    });
  };

  CustomController.prototype.renderJsonNull = function() {
    return this.render({
      json: null
    });
  };

  CustomController.prototype.renderJsonRenderToString = function() {
    return this.render({
      text: renderToString({
        json: '[]'
      })
    });
  };

  CustomController.prototype.renderJsonHelloWorld = function() {
    return this.render({
      json: JSON.stringify({
        hello: 'world'
      })
    });
  };

  CustomController.prototype.renderJsonHelloWorldWithParams = function() {
    return this.render({
      json: JSON.stringify({
        hello: this.params.hello
      })
    });
  };

  CustomController.prototype.renderJsonHelloWorldWithStatus = function() {
    return this.render({
      json: JSON.stringify({
        hello: 'world'
      }),
      status: 401
    });
  };

  CustomController.prototype.renderJsonHelloWorldWithCallback = function() {
    return this.render({
      json: JSON.stringify({
        hello: 'world'
      }),
      callback: 'alert'
    });
  };

  CustomController.prototype.renderJsonWithCustomContentType = function() {
    return this.render({
      json: JSON.stringify({
        hello: 'world'
      }),
      contentType: 'text/javascript'
    });
  };

  CustomController.prototype.renderSymbolJson = function() {
    return this.render({
      json: JSON.stringify({
        hello: 'world'
      })
    });
  };

  CustomController.prototype.renderJsonWithRenderToString = function() {
    return this.render({
      json: {
        hello: this.renderToString({
          partial: 'partial'
        })
      }
    });
  };

  CustomController.prototype.htmlXmlOrRss = function() {
    var _this = this;
    return this.respondTo(function(type) {
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      type.xml(function() {
        return _this.render({
          text: "XML"
        });
      });
      type.rss(function() {
        return _this.render({
          text: "RSS"
        });
      });
      return type.all(function() {
        return _this.render({
          text: "Nothing"
        });
      });
    });
  };

  CustomController.prototype.jsOrHtml = function() {
    var _this = this;
    return this.respondTo(function(type) {
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      type.js(function() {
        return _this.render({
          text: "JS"
        });
      });
      return type.all(function() {
        return _this.render({
          text: "Nothing"
        });
      });
    });
  };

  CustomController.prototype.jsonOrYaml = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.json(function() {
        return _this.render({
          text: "JSON!"
        });
      });
      return type.yaml(function() {
        return _this.render({
          text: "YAML!"
        });
      });
    });
  };

  CustomController.prototype.htmlOrXml = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      type.xml(function() {
        return _this.render({
          text: "XML"
        });
      });
      return type.all(function() {
        return _this.render({
          text: "Nothing"
        });
      });
    });
  };

  CustomController.prototype.jsonXmlOrHtml = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.json(function() {
        return _this.render({
          text: 'JSON'
        });
      });
      type.xml(function() {
        return _this.render({
          xml: 'XML'
        });
      });
      return type.html(function() {
        return _this.render({
          text: 'HTML'
        });
      });
    });
  };

  CustomController.prototype.forcedXml = function() {
    this.request.format = "xml";
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      return type.xml(function() {
        return _this.render({
          text: "XML"
        });
      });
    });
  };

  CustomController.prototype.justXml = function() {
    return this.respondTo(function(type) {
      var _this = this;
      return type.xml(function() {
        return _this.render({
          text: "XML"
        });
      });
    });
  };

  CustomController.prototype.usingDefaults = function() {
    return this.respondTo(function(type) {
      type.html();
      return type.xml();
    });
  };

  CustomController.prototype.usingDefaultsWithTypeList = function() {
    return respondTo("html", "xml");
  };

  CustomController.prototype.madeForContentType = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.rss(function() {
        return _this.render({
          text: "RSS"
        });
      });
      type.atom(function() {
        return _this.render({
          text: "ATOM"
        });
      });
      return type.all(function() {
        return _this.render({
          text: "Nothing"
        });
      });
    });
  };

  CustomController.prototype.customTypeHandling = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      return type.all(function() {
        return _this.render({
          text: "Nothing"
        });
      });
    });
  };

  CustomController.prototype.customConstantHandling = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      return type.mobile(function() {
        return _this.render({
          text: "Mobile"
        });
      });
    });
  };

  CustomController.prototype.customConstantHandlingWithoutBlock = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      return type.mobile();
    });
  };

  CustomController.prototype.handleAny = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: "HTML"
        });
      });
      return type.any("js", "xml", function() {
        return _this.render({
          text: "Either JS or XML"
        });
      });
    });
  };

  CustomController.prototype.handleAnyAny = function() {
    return this.respondTo(function(type) {
      var _this = this;
      type.html(function() {
        return _this.render({
          text: 'HTML'
        });
      });
      return type.any(function() {
        return _this.render({
          text: 'Whatever you ask for, I got it'
        });
      });
    });
  };

  CustomController.prototype.allTypesWithLayout = function() {
    return this.respondTo(function(type) {
      return type.html();
    });
  };

  return CustomController;

})(Tower.Controller);
