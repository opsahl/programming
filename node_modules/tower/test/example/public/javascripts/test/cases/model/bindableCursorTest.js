var __hasProp = {}.hasOwnProperty,
  __extends =   function(child, parent) { 
    if(typeof parent.__extend == 'function') return parent.__extend(child);
      
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if(typeof parent.extended == 'function') parent.extended(child); 
    return child; 
};

App.BindableCursorTest = (function(_super) {
  var BindableCursorTest;

  function BindableCursorTest() {
    return BindableCursorTest.__super__.constructor.apply(this, arguments);
  }

  BindableCursorTest = __extends(BindableCursorTest, _super);

  BindableCursorTest.field("string", {
    type: "String"
  });

  BindableCursorTest.field("integer", {
    type: "Integer"
  });

  BindableCursorTest.field("float", {
    type: "Float"
  });

  BindableCursorTest.field("date", {
    type: "Date"
  });

  BindableCursorTest.field("object", {
    type: "Object",
    "default": {}
  });

  BindableCursorTest.field("arrayString", {
    type: ["String"],
    "default": []
  });

  BindableCursorTest.field("arrayObject", {
    type: ["Object"],
    "default": []
  });

  return BindableCursorTest;

})(Tower.Model);

/*
describe 'Tower.Model.Cursor (bindable)', ->
  cursor = null
  
  beforeEach ->
    cursor  = Tower.Model.Cursor.create(content: [])
    cursor.make(model: App.BindableCursorTest)
    
  test 'addObserver', (done) ->
    record = App.BindableCursorTest.new()
    
    cursor.addObserver "length", (_, key, value) ->
      assert.ok value, "addObserver length called"
      done()
    
    cursor.addObject(record)
    
    assert.equal cursor.indexOf(record), 0

  test 'pushMatching (blank records)', (done) ->
    records = [
      new App.BindableCursorTest
      new App.BindableCursorTest
    ]
    
    cursor.addObserver "length", (_, key, value) ->
      assert.ok value, "addObserver length called"
      assert.equal cursor.content.length, 2
      done()
      
    cursor.pushMatching(records)
    
  test 'pushMatching (select 1 of 2)', (done) ->
    records = [
      new App.BindableCursorTest
      new App.BindableCursorTest(string: 'a string')
    ]
    
    cursor.where(string: /string/)

    cursor.addObserver "length", (_, key, value) ->
      assert.ok value, "addObserver length called"
      assert.equal cursor.content.length, 1
      done()

    cursor.pushMatching(records)
*/

