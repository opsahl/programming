var describeWith;

describeWith = function(store) {
  return describe("Tower.Model.Finders (Tower.Store." + store.name + ")", function() {
    beforeEach(function(done) {
      var _this = this;
      return store.clean(function() {
        App.Post.store(store);
        return done();
      });
    });
    describe('basics', function() {
      beforeEach(function(done) {
        return App.Post.create([
          {
            rating: 8
          }, {
            rating: 10
          }
        ], done);
      });
      test('all', function(done) {
        var _this = this;
        return App.Post.all(function(error, records) {
          assert.equal(records.length, 2);
          return done();
        });
      });
      test('first', function(done) {
        var _this = this;
        return App.Post.asc("rating").first(function(error, record) {
          assert.equal(record.get('rating'), 8);
          return done();
        });
      });
      test('last', function(done) {
        var _this = this;
        return App.Post.asc("rating").last(function(error, record) {
          assert.equal(record.get('rating'), 10);
          return done();
        });
      });
      test('count', function(done) {
        var _this = this;
        return App.Post.count(function(error, count) {
          assert.equal(count, 2);
          return done();
        });
      });
      return test('exists', function(done) {
        var _this = this;
        return App.Post.exists(function(error, value) {
          assert.equal(value, true);
          return done();
        });
      });
    });
    describe('$gt', function() {
      describe('integer > value (8, 10)', function() {
        beforeEach(function(done) {
          var _this = this;
          return App.Post.create([
            {
              rating: 8
            }, {
              rating: 10
            }
          ], function() {
            return done();
          });
        });
        test('where(rating: ">": 10)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">": 10
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
        test('where(rating: ">": 8)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">": 8
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(rating: ">": 7)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">": 7
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
      });
      return describe('date > value (' + _.strftime('MMM D, YYYY') + ')', function() {
        beforeEach(function(done) {
          return App.Post.create({
            rating: 1,
            someDate: new Date
          }, done);
        });
        test('where(someDate: ">": Dec 25, 1995)', function(done) {
          var _this = this;
          return App.Post.where({
            someDate: {
              ">": _.toDate("Dec 25, 1995")
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('where(createdAt: ">": Dec 25, 1995)', function(done) {
          var _this = this;
          return App.Post.where({
            createdAt: {
              ">": _.toDate("Dec 25, 1995")
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(createdAt: ">": Dec 25, 2050)', function(done) {
          var _this = this;
          return App.Post.where({
            createdAt: {
              ">": _.toDate("Dec 25, 2050")
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
    });
    describe('$gte', function() {
      return describe('integer >= value (8, 10)', function() {
        beforeEach(function(done) {
          return App.Post.create([
            {
              rating: 8
            }, {
              rating: 10
            }
          ], done);
        });
        test('where(rating: ">=": 11)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">=": 11
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
        test('where(rating: ">=": 10)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">=": 10
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('where(rating: ">=": 8)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">=": 8
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        return test('where(rating: ">=": 7)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              ">=": 7
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
      });
    });
    describe('$lt', function() {
      describe("integer < value", function() {
        beforeEach(function(done) {
          var _this = this;
          return App.Post.create([
            {
              rating: 8
            }, {
              rating: 10
            }
          ], function() {
            return done();
          });
        });
        test('where(rating: "<": 11)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<": 11
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        test('where(rating: "<": 10)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<": 10
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(rating: "<": 8)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<": 8
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
      return describe('date < value (' + _.toDate('MMM D, YYYY') + ')', function() {
        beforeEach(function(done) {
          return App.Post.create({
            rating: 1,
            someDate: new Date
          }, done);
        });
        test('where(someDate: "<": Dec 25, 2050)', function(done) {
          var _this = this;
          return App.Post.where({
            someDate: {
              "<": _.toDate("Dec 25, 2050")
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('where(createdAt: "<": Dec 25, 2050)', function(done) {
          var _this = this;
          return App.Post.where({
            createdAt: {
              "<": _.toDate("Dec 25, 2050")
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(createdAt: "<": Dec 25, 1995)', function(done) {
          var _this = this;
          return App.Post.where({
            createdAt: {
              "<": _.toDate("Dec 25, 1995")
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
    });
    describe('$lte', function() {
      describe('integer <= value', function() {
        beforeEach(function(done) {
          var attributes;
          attributes = [];
          attributes.push({
            rating: 8
          });
          attributes.push({
            rating: 10
          });
          return App.Post.create(attributes, done);
        });
        test('where(rating: "<=": 11)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<=": 11
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        test('where(rating: "<=": 10)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<=": 10
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        test('where(rating: "<=": 8)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<=": 8
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(rating: "<=": 7)', function(done) {
          var _this = this;
          return App.Post.where({
            rating: {
              "<=": 7
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
      return test('date <= value', function() {
        beforeEach(function(done) {
          return App.Post.create({
            rating: 1,
            someDate: new Date
          }, done);
        });
        test('where(someDate: "<=": Dec 25, 2050)', function(done) {
          var _this = this;
          return App.Post.where({
            someDate: {
              "<=": _.toDate("Dec 25, 2050")
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('where(createdAt: "<=": Dec 25, 2050)', function(done) {
          var _this = this;
          return App.Post.where({
            createdAt: {
              "<=": _.toDate("Dec 25, 2050")
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(createdAt: "<=": Dec 25, 1995)', function(done) {
          var _this = this;
          return App.Post.where({
            createdAt: {
              "<=": _.toDate("Dec 25, 1995")
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
    });
    describe('$match', function() {});
    describe('$notMatch', function() {});
    describe('$in', function() {
      return describe('string in array', function() {
        beforeEach(function(done) {
          var attributes;
          attributes = [];
          attributes.push({
            rating: 8,
            tags: ["ruby", "javascript"]
          });
          attributes.push({
            rating: 9,
            tags: ["nodejs", "javascript"]
          });
          return App.Post.create(attributes, done);
        });
        test('where(tags: "$in": ["javascript"])', function(done) {
          var _this = this;
          return App.Post.where({
            tags: {
              "$in": ["javascript"]
            }
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        test('where(tags: "$in": ["asp"])', function(done) {
          var _this = this;
          return App.Post.where({
            tags: {
              "$in": ["asp"]
            }
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
        return test('where(tags: "$in": ["nodejs"])', function(done) {
          var _this = this;
          return App.Post.where({
            tags: {
              "$in": ["nodejs"]
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
      });
    });
    describe('$any', function() {
      return describe('string in array', function() {
        beforeEach(function(done) {
          var attributes;
          attributes = [];
          attributes.push({
            rating: 8,
            tags: ["ruby", "javascript"]
          });
          attributes.push({
            rating: 9,
            tags: ["nodejs", "javascript"]
          });
          return App.Post.create(attributes, done);
        });
        test('anyIn(tags: ["javascript"])', function(done) {
          var _this = this;
          return App.Post.anyIn({
            tags: ["javascript"]
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        test('anyIn(tags: ["asp"])', function(done) {
          var _this = this;
          return App.Post.anyIn({
            tags: ["asp"]
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
        test('anyIn(tags: ["nodejs"])', function(done) {
          var _this = this;
          return App.Post.anyIn({
            tags: ["nodejs"]
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('anyIn(tags: ["nodejs", "ruby"])', function(done) {
          var _this = this;
          return App.Post.anyIn({
            tags: ["nodejs", "ruby"]
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        return test('anyIn(tags: ["nodejs", "asp"])', function(done) {
          var _this = this;
          return App.Post.anyIn({
            tags: ["nodejs", "asp"]
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
      });
    });
    describe('$nin', function() {
      beforeEach(function(done) {
        var attributes;
        attributes = [];
        attributes.push({
          rating: 8,
          tags: ["ruby", "javascript"]
        });
        attributes.push({
          rating: 9,
          tags: ["nodejs", "javascript"]
        });
        return App.Post.create(attributes, done);
      });
      test('notIn(tags: ["javascript"])', function(done) {
        var _this = this;
        return App.Post.notIn({
          tags: ["javascript"]
        }).count(function(error, count) {
          assert.equal(count, 0);
          return done();
        });
      });
      test('notIn(tags: ["asp"])', function(done) {
        var _this = this;
        return App.Post.notIn({
          tags: ["asp"]
        }).count(function(error, count) {
          assert.equal(count, 2);
          return done();
        });
      });
      return test('notIn(tags: ["nodejs"])', function(done) {
        var _this = this;
        return App.Post.notIn({
          tags: ["nodejs"]
        }).count(function(error, count) {
          assert.equal(count, 1);
          return done();
        });
      });
    });
    describe('$all', function() {
      beforeEach(function(done) {
        var attributes;
        attributes = [];
        attributes.push({
          rating: 8,
          tags: ["ruby", "javascript"]
        });
        attributes.push({
          rating: 9,
          tags: ["nodejs", "javascript"]
        });
        return App.Post.create(attributes, done);
      });
      return describe('string in array', function() {
        test('allIn(tags: ["javascript"])', function(done) {
          var _this = this;
          return App.Post.allIn({
            tags: ["javascript"]
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
        test('allIn(tags: ["asp"])', function(done) {
          var _this = this;
          return App.Post.allIn({
            tags: ["asp"]
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
        test('allIn(tags: ["nodejs"])', function(done) {
          var _this = this;
          return App.Post.allIn({
            tags: ["nodejs"]
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('allIn(tags: ["nodejs", "javascript"])', function(done) {
          var _this = this;
          return App.Post.allIn({
            tags: ["nodejs", "javascript"]
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('allIn(tags: ["nodejs", "ruby"])', function(done) {
          var _this = this;
          return App.Post.allIn({
            tags: ["nodejs", "ruby"]
          }).count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
    });
    describe('$null', function() {});
    describe('$notNull', function() {});
    describe('$eq', function() {
      return describe('string', function() {
        beforeEach(function(done) {
          var attributes;
          attributes = [];
          attributes.push({
            title: "Ruby",
            rating: 8
          });
          attributes.push({
            title: "JavaScript",
            rating: 10
          });
          return App.Post.create(attributes, done);
        });
        test('where(title: $eq: "Ruby")', function(done) {
          var _this = this;
          return App.Post.where({
            title: {
              $eq: "Ruby"
            }
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        test('where(title: /R/)', function(done) {
          var _this = this;
          return App.Post.where({
            title: /R/
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
        return test('where(title: /[Rr]/)', function(done) {
          var _this = this;
          return App.Post.where({
            title: /[Rr]/
          }).count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
      });
    });
    describe('$neq', function() {});
    return describe('pagination', function() {
      beforeEach(function(done) {
        var callbacks, i;
        Tower.Model.Criteria.prototype.defaultLimit = 5;
        callbacks = [];
        i = 0;
        while (i < 18) {
          i++;
          (function(i) {
            var _this = this;
            return callbacks.push(function(next) {
              var title;
              title = (new Array(i + 1)).join("a");
              return App.Post.create({
                title: title,
                rating: 8
              }, function(error, post) {
                return next();
              });
            });
          })(i);
        }
        return _.series(callbacks, done);
      });
      afterEach(function() {
        return Tower.Model.Criteria.prototype.defaultLimit = 20;
      });
      test('limit(1)', function(done) {
        var _this = this;
        return App.Post.limit(1).all(function(error, posts) {
          assert.equal(posts.length, 1);
          return done();
        });
      });
      test('limit(0) should not do anything', function(done) {
        var _this = this;
        return App.Post.limit(0).all(function(error, posts) {
          assert.equal(posts.length, 18);
          return done();
        });
      });
      test('page(2) middle of set', function(done) {
        var _this = this;
        return App.Post.page(2).asc("title").all(function(error, posts) {
          assert.equal(posts.length, 5);
          assert.equal(posts[0].get('title').length, 6);
          assert.equal(posts[4].get('title').length, 10);
          return done();
        });
      });
      test('page(4) end of set', function(done) {
        var _this = this;
        return App.Post.page(4).asc("title").all(function(error, posts) {
          assert.equal(posts.length, 3);
          return done();
        });
      });
      test('page(20) if page is greater than count, should return 0', function(done) {
        var _this = this;
        return App.Post.page(20).all(function(error, posts) {
          assert.equal(posts.length, 0);
          return done();
        });
      });
      test('paginate(page: 4, perPage: 5) end of set', function(done) {
        var _this = this;
        return App.Post.paginate({
          page: 4,
          perPage: 5
        }).asc("title").all(function(error, posts) {
          assert.equal(posts.length, 3);
          return done();
        });
      });
      test('desc', function(done) {
        var _this = this;
        return App.Post.page(2).desc('title').all(function(error, posts) {
          assert.equal(posts[0].get('title').length, 13);
          return done();
        });
      });
      return test('asc', function(done) {
        var _this = this;
        return App.Post.page(2).asc('title').all(function(error, posts) {
          assert.equal(posts[0].get('title').length, 6);
          return done();
        });
      });
    });
  });
};

describeWith(Tower.Store.Memory);

if (!Tower.client) {
  describeWith(Tower.Store.MongoDB);
}
