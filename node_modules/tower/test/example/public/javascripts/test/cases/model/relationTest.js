var describeWith, group, membership, user;

membership = null;

group = null;

user = null;

describeWith = function(store) {
  return describe('Tower.Model.Relation', function() {
    beforeEach(function(done) {
      var _this = this;
      return async.series([
        function(callback) {
          return store.clean(callback);
        }, function(callback) {
          App.Child.store(store);
          App.Parent.store(store);
          App.User.store(store);
          App.Membership.store(store);
          App.DependentMembership.store(store);
          App.Group.store(store);
          return callback();
        }, function(callback) {
          return App.User.create({
            firstName: "Lance"
          }, function(error, record) {
            user = record;
            return callback();
          });
        }, function(callback) {
          return App.Group.create(function(error, record) {
            group = record;
            return callback();
          });
        }
      ], done);
    });
    afterEach(function() {
      try {
        App.Parent.create.restore();
      } catch (_error) {}
      try {
        App.Group.create.restore();
      } catch (_error) {}
      try {
        return App.Membership.create.restore();
      } catch (_error) {}
    });
    describe('inverseOf', function() {
      test('noInverse_noInverse', function() {
        return assert.notEqual("noInverse_noInverse", (function() {
          try {
            return App.Parent.relation("noInverse_noInverse").inverse().name;
          } catch (_error) {}
        })());
      });
      test('parent: noInverse_withInverse, child: withInverse_noInverse', function() {
        return assert.equal("withInverse_noInverse", App.Parent.relation("noInverse_withInverse").inverse().name);
      });
      test('withInverse_withInverse', function() {
        return assert.equal("withInverse_withInverse", App.Parent.relation("withInverse_withInverse").inverse().name);
      });
      return test('parent: withInverse_noInverse, child: noInverse_withInverse', function() {
        return assert.equal("noInverse_withInverse", App.Parent.relation("withInverse_noInverse").inverse().name);
      });
    });
    describe('HasMany', function() {
      describe('.create', function() {
        test('compileForCreate', function() {
          var criteria;
          criteria = user.memberships().criteria;
          criteria.compileForCreate();
          return assert.deepEqual(criteria.conditions(), {
            userId: user.get('id')
          });
        });
        test('compileForCreate with cache: true', function() {
          var criteria;
          criteria = user.cachedMemberships().criteria;
          criteria.compileForCreate();
          return assert.deepEqual(criteria.conditions(), {});
        });
        test('compileForCreate on polymorphic record', function() {
          var criteria;
          criteria = user.polymorphicMemberships().criteria;
          criteria.compileForCreate();
          return assert.deepEqual(criteria.conditions(), {
            joinableId: user.get('id'),
            joinableType: "User"
          });
        });
        return test('create relationship model', function(done) {
          var _this = this;
          return user.memberships().create({
            groupId: group.get('id')
          }, function(error, membership) {
            assert.equal(membership.get('userId').toString(), user.get('id').toString());
            assert.equal(membership.get('groupId').toString(), group.get('id').toString());
            return done();
          });
        });
      });
      describe('.update', function() {
        beforeEach(function(done) {
          var _this = this;
          return App.Membership.create({
            groupId: group.get('id')
          }, function() {
            return user.memberships().create({
              groupId: group.get('id')
            }, done);
          });
        });
        test('compileForUpdate', function() {
          var criteria;
          criteria = user.memberships().criteria;
          criteria.compileForUpdate();
          return assert.deepEqual(criteria.conditions(), {
            userId: user.get('id')
          });
        });
        return test('update relationship model', function(done) {
          var _this = this;
          return user.memberships().update({
            kind: "guest"
          }, function(error, memberships) {
            assert.equal(memberships.length, 1);
            assert.equal(memberships[0].get('kind'), 'guest');
            return App.Membership.count(function(error, count) {
              assert.equal(count, 2);
              return done();
            });
          });
        });
      });
      return describe('.destroy', function() {
        beforeEach(function(done) {
          var _this = this;
          return App.Membership.create({
            groupId: group.get('id')
          }, function() {
            return user.memberships().create({
              groupId: group.get('id')
            }, done);
          });
        });
        test('compileForDestroy', function() {
          var criteria;
          criteria = user.memberships().criteria;
          criteria.compileForDestroy();
          return assert.deepEqual(criteria.conditions(), {
            userId: user.get('id')
          });
        });
        return test('destroy relationship model', function(done) {
          var _this = this;
          return user.memberships().destroy(function(error, memberships) {
            assert.equal(memberships.length, 1);
            return App.Membership.count(function(error, count) {
              assert.equal(count, 1);
              return done();
            });
          });
        });
      });
    });
    describe('HasMany(through: true)', function() {
      describe('.create', function() {
        test('compileForCreate', function() {
          var criteria;
          criteria = user.groups().criteria;
          criteria.compileForCreate();
          return assert.deepEqual(criteria.conditions(), {});
        });
        test('throughRelation', function() {
          var criteria, inverseRelation, relation, throughRelation;
          criteria = user.groups().criteria;
          relation = criteria.relation;
          throughRelation = criteria.throughRelation;
          assert.equal(throughRelation.type, "Membership");
          assert.equal(throughRelation.targetType, "Membership");
          assert.equal(throughRelation.name, "memberships");
          assert.equal(throughRelation.ownerType, "App.User");
          assert.equal(throughRelation.foreignKey, "userId");
          inverseRelation = relation.inverseThrough(throughRelation);
          assert.equal(inverseRelation.name, "group");
          assert.equal(inverseRelation.type, "Group");
          return assert.equal(inverseRelation.foreignKey, "groupId");
        });
        test('createThroughRelation', function(done) {
          var criteria,
            _this = this;
          criteria = user.groups().criteria;
          return criteria.createThroughRelation(group, function(error, record) {
            assert.equal(record.constructor.name, "Membership");
            assert.equal(record.get('groupId').toString(), group.get('id').toString());
            assert.equal(record.get('userId').toString(), user.get('id').toString());
            return done();
          });
        });
        test('all together now, create through model', function(done) {
          var _this = this;
          return user.groups().create(function(error, group) {
            return user.memberships().all(function(error, memberships) {
              var record;
              assert.equal(memberships.length, 1);
              record = memberships[0];
              assert.equal(record.get('groupId').toString(), group.get('id').toString());
              assert.equal(record.get('userId').toString(), user.get('id').toString());
              return user.groups().all(function(error, groups) {
                assert.equal(groups.length, 1);
                return done();
              });
            });
          });
        });
        return test('create 2 models and 2 through models as Arguments', function(done) {
          var _this = this;
          return user.groups().create({}, {}, function(error, groups) {
            assert.equal(groups.length, 2);
            return App.Group.count(function(error, count) {
              assert.equal(count, 3);
              return user.memberships().count(function(error, count) {
                assert.equal(count, 2);
                return user.groups().count(function(error, count) {
                  assert.equal(count, 2);
                  return done();
                });
              });
            });
          });
        });
      });
      describe('.update', function() {
        beforeEach(function(done) {
          return user.groups().create({
            name: "Starbucks"
          }, {}, done);
        });
        test('update all groups', function(done) {
          var _this = this;
          return user.groups().update({
            name: "Peet's"
          }, function() {
            return user.groups().all(function(error, groups) {
              var group, _i, _len;
              assert.equal(groups.length, 2);
              for (_i = 0, _len = groups.length; _i < _len; _i++) {
                group = groups[_i];
                assert.equal(group.get('name'), "Peet's");
              }
              return done();
            });
          });
        });
        return test('update matching groups', function(done) {
          var _this = this;
          return user.groups().where({
            name: "Starbucks"
          }).update({
            name: "Peet's"
          }, function() {
            return user.groups().where({
              name: "Peet's"
            }).count(function(error, count) {
              assert.equal(count, 1);
              return user.memberships().count(function(error, count) {
                assert.equal(count, 2);
                return done();
              });
            });
          });
        });
      });
      describe('.destroy', function() {
        beforeEach(function(done) {
          return user.groups().create({
            name: "Starbucks"
          }, {}, done);
        });
        return test('destroy all groups', function(done) {
          var _this = this;
          return user.groups().destroy(function() {
            return user.groups().count(function(error, count) {
              assert.equal(count, 0);
              return done();
            });
          });
        });
      });
      describe('.find', function() {
        beforeEach(function(done) {
          var _this = this;
          return App.Group.create(function() {
            return App.Membership.create(function() {
              return user.memberships().create({
                groupId: group.get('id')
              }, function(error, record) {
                membership = record;
                return done();
              });
            });
          });
        });
        return test('appendThroughConditions', function(done) {
          var criteria,
            _this = this;
          criteria = user.groups().criteria;
          assert.deepEqual(criteria.conditions(), {});
          return criteria.appendThroughConditions(function() {
            assert.deepEqual(criteria.conditions(), {
              id: {
                $in: [group.get('id')]
              }
            });
            return done();
          });
        });
      });
      return describe('finders', function() {
        beforeEach(function(done) {
          var _this = this;
          return App.Group.create(function() {
            return App.Membership.create(function() {
              return user.groups().create({
                name: "A"
              }, {
                name: "B"
              }, {
                name: "C"
              }, done);
            });
          });
        });
        describe('relation (groups)', function() {
          test('all', function(done) {
            var _this = this;
            return user.groups().all(function(error, records) {
              assert.equal(records.length, 3);
              return done();
            });
          });
          test('first', function(done) {
            var _this = this;
            return user.groups().desc("name").first(function(error, record) {
              assert.equal(record.get('name'), "C");
              return done();
            });
          });
          test('last', function(done) {
            var _this = this;
            return user.groups().desc("name").last(function(error, record) {
              assert.equal(record.get('name'), "A");
              return done();
            });
          });
          test('count', function(done) {
            var _this = this;
            return user.groups().count(function(error, count) {
              assert.equal(count, 3);
              return done();
            });
          });
          return test('exists', function(done) {
            var _this = this;
            return user.groups().exists(function(error, value) {
              assert.equal(value, true);
              return done();
            });
          });
        });
        return describe('through relation (memberships)', function() {
          test('all', function(done) {
            var _this = this;
            return user.memberships().all(function(error, records) {
              assert.equal(records.length, 3);
              return done();
            });
          });
          test('first', function(done) {
            var _this = this;
            return user.memberships().first(function(error, record) {
              assert.ok(record);
              return done();
            });
          });
          test('last', function(done) {
            var _this = this;
            return user.memberships().last(function(error, record) {
              assert.ok(record);
              return done();
            });
          });
          test('count', function(done) {
            var _this = this;
            return user.memberships().count(function(error, count) {
              assert.equal(count, 3);
              return done();
            });
          });
          return test('exists', function(done) {
            var _this = this;
            return user.memberships().exists(function(error, value) {
              assert.equal(value, true);
              return done();
            });
          });
        });
      });
    });
    return describe('hasMany with idCache', function() {
      var parent;
      parent = null;
      beforeEach(function(done) {
        var _this = this;
        return async.series([
          function(next) {
            return App.Parent.create(function(error, record) {
              parent = record;
              return next();
            });
          }
        ], done);
      });
      return describe('Parent.idCacheTrue_idCacheFalse', function() {
        var criteria, relation;
        criteria = null;
        relation = null;
        beforeEach(function() {
          relation = App.Parent.relations().idCacheTrue_idCacheFalse;
          return criteria = parent.idCacheTrue_idCacheFalse().criteria;
        });
        test('relation', function() {
          assert.equal(relation.idCache, true);
          return assert.equal(relation.idCacheKey, "idCacheTrue_idCacheFalse" + "Ids");
        });
        test('default for idCacheKey should be array', function() {
          return assert.ok(_.isArray(App.Parent.fields()[relation.idCacheKey]._default));
        });
        test('compileForCreate', function(done) {
          criteria.compileForCreate();
          assert.deepEqual(criteria.conditions(), {});
          return done();
        });
        test('updateOwnerRecord', function() {
          return assert.equal(criteria.updateOwnerRecord(), true);
        });
        test('ownerAttributes', function(done) {
          var child;
          child = new App.Child({
            id: 20
          });
          assert.deepEqual(criteria.ownerAttributes(child), {
            '$addToSet': {
              idCacheTrue_idCacheFalseIds: child.get('id')
            }
          });
          return done();
        });
        return describe('persistence', function() {
          var child, child2, child3;
          child = null;
          child2 = null;
          child3 = null;
          beforeEach(function(done) {
            var _this = this;
            return async.series([
              function(next) {
                return parent.idCacheTrue_idCacheFalse().create(function(error, record) {
                  child = record;
                  return next();
                });
              }, function(next) {
                return parent.idCacheTrue_idCacheFalse().create(function(error, record) {
                  child2 = record;
                  return next();
                });
              }, function(next) {
                return App.Child.create(function(error, record) {
                  child3 = record;
                  return next();
                });
              }, function(next) {
                return App.Parent.find(parent.get('id'), function(error, record) {
                  parent = record;
                  return next();
                });
              }
            ], done);
          });
          test('create', function(done) {
            assert.equal(child.get('parentId'), null);
            assert.deepEqual(parent.get(relation.idCacheKey), [child.get('id'), child2.get('id')]);
            return done();
          });
          test('update(1)', function(done) {
            var _this = this;
            return parent.idCacheTrue_idCacheFalse().update(child.get('id'), {
              value: "something"
            }, function() {
              return App.Child.find(child.get('id'), function(error, child) {
                assert.equal(child.get('value'), 'something');
                return App.Child.find(child2.get('id'), function(error, child) {
                  assert.equal(child.get('value'), null);
                  return done();
                });
              });
            });
          });
          test('update()', function(done) {
            var _this = this;
            return parent.idCacheTrue_idCacheFalse().update({
              value: "something"
            }, function() {
              return App.Child.find(child.get('id'), function(error, child) {
                assert.equal(child.get('value'), 'something');
                return App.Child.find(child3.get('id'), function(error, child) {
                  assert.equal(child.get('value'), null);
                  return done();
                });
              });
            });
          });
          test('destroy(1)', function(done) {
            var _this = this;
            return parent.idCacheTrue_idCacheFalse().destroy(child.get('id'), function() {
              return App.Parent.find(parent.get('id'), function(error, parent) {
                assert.deepEqual(parent.get(relation.idCacheKey), [child2.get('id')]);
                return App.Child.all(function(error, records) {
                  assert.equal(records.length, 2);
                  return done();
                });
              });
            });
          });
          test('destroy()', function(done) {
            var _this = this;
            return parent.idCacheTrue_idCacheFalse().destroy(function() {
              return App.Parent.find(parent.get('id'), function(error, parent) {
                assert.deepEqual(parent.get(relation.idCacheKey), []);
                return App.Child.all(function(error, records) {
                  assert.equal(records.length, 1);
                  return done();
                });
              });
            });
          });
          test('all', function(done) {
            var _this = this;
            return parent.idCacheTrue_idCacheFalse().all(function(error, records) {
              assert.equal(records.length, 2);
              return done();
            });
          });
          return test('add to set', function(done) {
            var _this = this;
            return App.Child.create(function(error, newChild) {
              return parent.idCacheTrue_idCacheFalse().add(newChild, function() {
                return App.Parent.find(parent.get('id'), function(error, parent) {
                  assert.deepEqual(_.toS(parent.get(relation.idCacheKey)), _.toS([child.get('id'), child2.get('id'), newChild.get('id')]));
                  return App.Child.all(function(error, records) {
                    assert.equal(records.length, 4);
                    return done();
                  });
                });
              });
            });
          });
        });
      });
    });
  });
};

describeWith(Tower.Store.Memory);

if (!Tower.client) {
  describeWith(Tower.Store.MongoDB);
}
