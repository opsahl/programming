
describe('Tower.Dispatch.Route', function() {
  describe('resources', function() {
    beforeEach(function() {
      Tower.Route.clear();
      return Tower.Route.draw(function() {
        this.resource("user");
        this.resources("posts", function() {
          return this.resources("comments");
        });
        return this.namespace("admin", function() {
          return this.resources("posts", function() {
            this.resources("comments");
            this.member(function() {
              return this.get("dashboard");
            });
            return this.collection(function() {
              return this.get("dashboard");
            });
          });
        });
      });
    });
    it('should have single resource routes', function() {
      var routes;
      routes = Tower.Route.all().slice(0, 6);
      assert.equal(routes[0].path, "/user/new.:format?");
      assert.equal(routes[1].path, "/user.:format?");
      assert.equal(routes[2].path, "/user.:format?");
      assert.equal(routes[3].path, "/user/edit.:format?");
      assert.equal(routes[4].path, "/user.:format?");
      return assert.equal(routes[5].path, "/user.:format?");
    });
    it('should have multiple resource routes', function() {
      var routes;
      routes = Tower.Route.all().slice(6, 14);
      assert.equal(routes[0].path, "/posts.:format?");
      assert.equal(routes[0].methods[0], "GET");
      assert.equal(routes[0].name, "posts");
      assert.equal(routes[1].path, "/posts/new.:format?");
      assert.equal(routes[1].methods[0], "GET");
      assert.equal(routes[2].path, "/posts.:format?");
      assert.equal(routes[2].methods[0], "POST");
      assert.equal(routes[3].path, "/posts/:id.:format?");
      assert.equal(routes[3].methods[0], "GET");
      assert.equal(routes[4].path, "/posts/:id/edit.:format?");
      assert.equal(routes[4].methods[0], "GET");
      assert.equal(routes[5].path, "/posts/:id.:format?");
      assert.equal(routes[5].methods[0], "PUT");
      assert.equal(routes[6].path, "/posts/:id.:format?");
      return assert.equal(routes[6].methods[0], "DELETE");
    });
    it('should have nested routes', function() {
      var route, routes;
      routes = Tower.Route.all().slice(13, 21);
      route = routes[0];
      assert.equal(route.name, "postComments");
      assert.equal(route.path, "/posts/:postId/comments.:format?");
      assert.equal(route.methods[0], "GET");
      route = routes[1];
      assert.equal(route.name, "newPostComment");
      assert.equal(route.path, "/posts/:postId/comments/new.:format?");
      assert.equal(route.methods[0], "GET");
      route = routes[2];
      assert.equal(route.name, null);
      assert.equal(route.path, "/posts/:postId/comments.:format?");
      assert.equal(route.methods[0], "POST");
      route = routes[3];
      assert.equal(route.name, "postComment");
      assert.equal(route.path, "/posts/:postId/comments/:id.:format?");
      assert.equal(route.methods[0], "GET");
      route = routes[4];
      assert.equal(route.name, "editPostComment");
      assert.equal(route.path, "/posts/:postId/comments/:id/edit.:format?");
      return assert.equal(route.methods[0], "GET");
    });
    it('should have namespaces', function() {
      var route, routes;
      routes = Tower.Route.all().slice(20, 27);
      route = routes[0];
      assert.equal(route.name, "adminPosts");
      assert.equal(route.path, "/admin/posts.:format?");
      assert.equal(route.methods[0], "GET");
      route = routes[1];
      assert.equal(route.name, "newAdminPost");
      assert.equal(route.path, "/admin/posts/new.:format?");
      assert.equal(route.methods[0], "GET");
      route = routes[3];
      assert.equal(route.name, "adminPost");
      assert.equal(route.path, "/admin/posts/:id.:format?");
      return assert.equal(route.methods[0], "GET");
    });
    return it('should have namespaces with nesting', function() {
      var route, routes;
      routes = Tower.Route.all().slice(27, 33);
      route = routes[0];
      assert.equal(route.name, "adminPostComments");
      assert.equal(route.path, "/admin/posts/:postId/comments.:format?");
      assert.equal(route.methods[0], "GET");
      route = routes[1];
      assert.equal(route.name, "newAdminPostComment");
      assert.equal(route.path, "/admin/posts/:postId/comments/new.:format?");
      assert.equal(route.methods[0], "GET");
      return assert.equal(route.urlFor({
        postId: 8
      }), "/admin/posts/8/comments/new");
    });
  });
  return describe('url builder', function() {
    return it('should build a url from a model class', function() {
      var url;
      return url = Tower.urlFor;
    });
  });
});
