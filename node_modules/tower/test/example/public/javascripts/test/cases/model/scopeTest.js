var criteria, describeWith, scope, user;

scope = null;

criteria = null;

user = null;

describeWith = function(store) {
  return describe("Tower.Model.Scope (Tower.Store." + store.name + ")", function() {
    beforeEach(function(done) {
      var _this = this;
      return async.series([
        function(callback) {
          return store.clean(callback);
        }, function(callback) {
          App.User.store(store);
          App.Admin.store(store);
          return callback();
        }, function(callback) {
          return App.User.create({
            id: 1,
            firstName: "Lance"
          }, callback);
        }, function(callback) {
          return App.User.create({
            id: 2,
            firstName: "Dane"
          }, callback);
        }
      ], done);
    });
    test('where(firstName: "Lance")', function(done) {
      var _this = this;
      return App.User.where({
        firstName: "Lance"
      }).first(function(error, user) {
        assert.equal(user.get("firstName"), "Lance");
        return done();
      });
    });
    test('where(firstName: "=~": "c")', function(done) {
      var _this = this;
      return App.User.where({
        firstName: {
          "=~": "c"
        }
      }).all(function(error, users) {
        assert.equal(users.length, 1);
        assert.equal(users[0].get("firstName"), "Lance");
        return done();
      });
    });
    test('where(firstName: "=~": "a").order("firstName")', function(done) {
      var _this = this;
      return App.User.where({
        firstName: {
          "=~": "a"
        }
      }).order("firstName").all(function(error, users) {
        assert.equal(users.length, 2);
        assert.equal(users[0].get("firstName"), "Dane");
        return done();
      });
    });
    test('where(firstName: "=~": "a").order("firstName", "desc")', function(done) {
      var _this = this;
      return App.User.where({
        firstName: {
          "=~": "a"
        }
      }).order("firstName", "desc").all(function(error, users) {
        assert.equal(users.length, 2);
        assert.equal(users[0].get("firstName"), "Lance");
        return done();
      });
    });
    return describe('named scopes', function() {
      beforeEach(function(done) {
        var _this = this;
        return async.series([
          function(next) {
            return App.User.create({
              firstName: "Baldwin",
              likes: 10
            }, next);
          }, function(next) {
            return App.Admin.create({
              firstName: "An Admin",
              likes: 20
            }, next);
          }, function(next) {
            return App.Admin.create({
              firstName: "An Admin without likes",
              likes: 0
            }, next);
          }
        ], done);
      });
      test('named scopes', function(done) {
        var _this = this;
        return App.User.byBaldwin().all(function(error, users) {
          assert.equal(users.length, 1);
          assert.equal(users[0].get("firstName"), "Baldwin");
          return done();
        });
      });
      return test('subclasses and named scopes', function(done) {
        var _this = this;
        return App.Admin.subclassNamedScope().all(function(error, users) {
          assert.equal(users.length, 1);
          assert.equal(users[0].get("type"), "Admin");
          return done();
        });
      });
    });
  });
};

describeWith(Tower.Store.Memory);

if (!Tower.client) {
  describeWith(Tower.Store.MongoDB);
}
