var user;

user = null;

describe("Tower.Model.Metadata", function() {
  test('.name', function() {
    return assert.equal(App.User.metadata().name, "user");
  });
  test('.namePlural', function() {
    return assert.equal(App.User.metadata().namePlural, "users");
  });
  test('.baseClass', function() {
    return assert.equal(App.User.baseClass(), App.User);
  });
  test('.toParam', function() {
    assert.equal(App.User.toParam(), "users");
    return assert.equal(Tower.Model.toParam(), void 0);
  });
  test('.toKey', function() {
    return assert.equal(App.User.toKey(), "user");
  });
  test('.metadata', function() {
    var metadata;
    metadata = _.extend({}, App.User.metadata());
    delete metadata.store;
    assert.equal(metadata.name, 'user');
    assert.equal(metadata.namePlural, 'users');
    assert.equal(metadata.className, 'User');
    assert.equal(metadata.classNamePlural, 'Users');
    assert.equal(metadata.paramName, 'user');
    assert.equal(metadata.paramNamePlural, 'users');
    assert.equal(metadata.modelName, 'App.User');
    return assert.equal(metadata.controllerName, 'App.UsersController');
  });
  return describe('instance', function() {
    beforeEach(function() {
      return user = new App.User;
    });
    test('#toLabel', function() {
      return assert.equal(user.toLabel(), "User");
    });
    return test('#metadata', function() {
      var metadata;
      metadata = _.extend({}, user.metadata());
      delete metadata.store;
      assert.equal(metadata.name, 'user');
      assert.equal(metadata.namePlural, 'users');
      assert.equal(metadata.className, 'User');
      assert.equal(metadata.classNamePlural, 'Users');
      assert.equal(metadata.paramName, 'user');
      assert.equal(metadata.paramNamePlural, 'users');
      assert.equal(metadata.modelName, 'App.User');
      return assert.equal(metadata.controllerName, 'App.UsersController');
    });
  });
});
