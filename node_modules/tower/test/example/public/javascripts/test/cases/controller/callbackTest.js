var controller, router, user;

controller = null;

user = null;

router = null;

if (Tower.client) {
  _.get = function(path, options, callback) {
    var auth, caller, format, headers, params, redirects;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    options || (options = {});
    headers = options.headers || {};
    params = options.params || {};
    redirects = options.redirects || 5;
    auth = options.auth;
    format = options.format;
    History.pushState(null, null, path);
    caller = function() {
      return callback.call(Tower.Controller.testCase);
    };
    return setTimeout(caller, 200);
  };
}

describe('Tower.Controller.Callbacks', function() {
  if (!Tower.client) {
    beforeEach(function(done) {
      return Tower.start(done);
    });
    afterEach(function() {
      return Tower.stop();
    });
  } else {
    afterEach(function() {
      return History.replaceState(null, null, "/");
    });
  }
  return describe('.beforeAction', function() {
    test("beforeAction('testOnlyCallback', only: ['testCreateCallback', 'testUpdateCallback'])", function(done) {
      return _.get('/custom/testCreateCallback', function() {
        assert.equal(this.testOnlyCallbackCalled, true);
        assert.equal(this.testCreateCallbackCalled, true);
        return _.get('/custom/testNoCallback', function() {
          assert.equal(this.testOnlyCallbackCalled, void 0);
          assert.equal(this.testNoCallbackCalled, true);
          return done();
        });
      });
    });
    return test("beforeAction('testExceptCallback', except: 'testNoCallback')", function(done) {
      return _.get('/custom/testCreateCallback', function() {
        assert.equal(this.testExceptCallbackCalled, true);
        assert.equal(this.testCreateCallbackCalled, true);
        return _.get('/custom/testNoCallback', function() {
          assert.equal(this.testExceptCallbackCalled, void 0);
          assert.equal(this.testNoCallbackCalled, true);
          return done();
        });
      });
    });
  });
});
