var attr, describeWith;

attr = Tower.Model.Attribute;

describeWith = function(store) {
  return describe("Tower.Model.Fields (Tower.Store." + store.name + ")", function() {
    beforeEach(function(done) {
      App.BaseModel.store(store);
      App.User.store(store);
      return done();
    });
    describe('class', function() {
      test('type: "Id"', function() {
        var field;
        field = App.BaseModel.fields().id;
        return assert.equal(field.type, "Id");
      });
      test('type: "Integer" without default', function() {
        var field;
        field = App.BaseModel.fields().likeCountWithoutDefault;
        assert.equal(field.type, "Integer");
        return assert.equal(field["default"], void 0);
      });
      test('type: "Integer", default: 0', function() {
        var field;
        field = App.BaseModel.fields().likeCountWithDefault;
        assert.equal(field.type, "Integer");
        return assert.equal(field._default, 0);
      });
      test('type: "Array", default: []', function() {
        var field;
        field = App.BaseModel.fields().tags;
        assert.equal(field.type, "Array");
        return assert.isArray(field._default);
      });
      test('default type == "String"', function() {
        var field;
        field = App.BaseModel.fields().title;
        assert.equal(field.type, "String");
        return assert.equal(field._default, void 0);
      });
      test('type: ["NestedModel"]', function() {
        var field;
        field = App.BaseModel.fields().nestedModels;
        assert.equal(field.type, "Array");
        assert.equal(field.encodingType, "Array");
        return assert.equal(field.itemType, "NestedModel");
      });
      test('array of field names without options', function() {
        var a1, a2, a3, _ref;
        _ref = App.BaseModel.fields(), a1 = _ref.a1, a2 = _ref.a2, a3 = _ref.a3;
        assert.equal(a1.type, "String");
        return assert.equal(a3.type, "String");
      });
      test('array of field names with options', function() {
        var a4, a5, a6, _ref;
        _ref = App.BaseModel.fields(), a4 = _ref.a4, a5 = _ref.a5, a6 = _ref.a6;
        assert.equal(a4.type, "Integer");
        return assert.equal(a6.type, "Integer");
      });
      return test('object of field names', function() {
        var o1, o2, _ref;
        _ref = App.BaseModel.fields(), o1 = _ref.o1, o2 = _ref.o2;
        assert.equal(o1.type, "String");
        return assert.equal(o2.type, "Integer");
      });
    });
    describe('serialization', function() {
      test('string "A string" == "A string"', function() {
        assert.equal(attr.string.to("A string"), "A string");
        return assert.equal(attr.string.from("A string"), "A string");
      });
      test('string null, undefined == null', function() {
        assert.equal(attr.string.to(void 0), null);
        assert.equal(attr.string.from(void 0), null);
        assert.equal(attr.string.to(null), null);
        return assert.equal(attr.string.from(null), null);
      });
      test('boolean == true', function() {
        assert.equal(attr.boolean.to(true), true);
        assert.equal(attr.boolean.from(true), true);
        assert.equal(attr.boolean.to(1), true);
        assert.equal(attr.boolean.from(1), true);
        assert.equal(attr.boolean.to("true"), true);
        return assert.equal(attr.boolean.from("true"), true);
      });
      test('boolean == false', function() {
        assert.equal(attr.boolean.to(false), false);
        assert.equal(attr.boolean.from(false), false);
        assert.equal(attr.boolean.to(null), false);
        assert.equal(attr.boolean.from(null), false);
        assert.equal(attr.boolean.to(void 0), false);
        assert.equal(attr.boolean.from(void 0), false);
        assert.equal(attr.boolean.to(0), false);
        assert.equal(attr.boolean.from(0), false);
        assert.equal(attr.boolean.to("false"), false);
        return assert.equal(attr.boolean.from("false"), false);
      });
      test('number', function() {
        assert.equal(attr.number.to(1), 1);
        assert.equal(attr.number.to(1.1), 1.1);
        assert.equal(attr.number.from(1), 1);
        return assert.equal(attr.number.from(1.1), 1.1);
      });
      test('integer', function() {
        assert.equal(attr.integer.to(1), 1);
        assert.equal(attr.integer.to(1.1), 1);
        assert.equal(attr.integer.from(1), 1);
        return assert.equal(attr.integer.from(1.1), 1);
      });
      test('float', function() {
        assert.equal(attr.float.to(1), 1.0);
        assert.equal(attr.float.to(1.1), 1.1);
        assert.equal(attr.float.from(1), 1.0);
        return assert.equal(attr.float.from(1.1), 1.1);
      });
      return test('array', function() {
        assert.equal(attr.array.to(void 0), null);
        assert.equal(attr.array.to(null), null);
        assert.deepEqual(attr.array.from(1), [1]);
        assert.deepEqual(attr.array.from([1]), [1]);
        assert.deepEqual(attr.array.from("hey"), ["hey"]);
        return assert.deepEqual(attr.array.from(["hey"]), ["hey"]);
      });
    });
    describe('instance', function() {
      var model;
      model = null;
      beforeEach(function() {
        return model = new App.BaseModel;
      });
      test('#attributes', function() {
        return assert.equal(typeof model.attributes, "object");
      });
      test('#get', function() {
        return assert.equal(model.get('likeCountWithDefault'), 0);
      });
      test('#set', function() {
        assert.equal(model.get('likeCountWithDefault'), 0);
        model.set('likeCountWithDefault', 10);
        return assert.equal(model.get('likeCountWithDefault'), 10);
      });
      test('#has', function() {
        assert.equal(model.has('likeCountWithDefault'), true);
        return assert.equal(model.has('somethingIDontHave'), false);
      });
      test('encode boolean', function() {
        assert.equal(model.get("favorite"), false);
        model.set("favorite", "true");
        return assert.equal(model.get("favorite"), true);
      });
      test('custom encoding', function() {
        model.set("custom", ["ruby", "javascript"]);
        assert.deepEqual(model.attributes.custom, ["ruby", "javascript"]);
        assert.equal(model.get("custom"), "ruby-javascript");
        model.attributes.custom.push("mongodb");
        return assert.equal(model.get("custom"), "ruby-javascript-mongodb");
      });
      return describe('operations', function() {
        test('$push', function() {
          model.set("tags", ["ruby"]);
          assert.deepEqual(model.get("tags"), ["ruby"]);
          model.push({
            tags: "javascript"
          });
          assert.deepEqual(model.get("tags"), ["ruby", "javascript"]);
          model.push({
            tags: ["mongodb"]
          });
          return assert.deepEqual(model.get("tags"), ["ruby", "javascript", ["mongodb"]]);
        });
        test('$pushAll', function() {
          assert.deepEqual(model.get("tags"), []);
          model.pushAll({
            tags: ["ruby"]
          });
          assert.deepEqual(model.get("tags"), ["ruby"]);
          model.pushAll({
            tags: ["javascript", "mongodb", "ruby"]
          });
          return assert.deepEqual(model.get("tags"), ["ruby", "javascript", "mongodb", "ruby"]);
        });
        test('$pullAll', function() {
          model.set({
            tags: ["ruby", "javascript", "mongodb"]
          });
          model.pullAll({
            tags: ["ruby", "javascript"]
          });
          return assert.deepEqual(model.get("tags"), ["mongodb"]);
        });
        return test('$inc', function() {
          assert.equal(model.get("likeCount"), 0);
          model.inc({
            likeCount: 1
          });
          assert.equal(model.get("likeCount"), 1);
          model.inc({
            likeCount: 1
          });
          assert.equal(model.get("likeCount"), 2);
          model.inc({
            likeCount: -1
          });
          return assert.equal(model.get("likeCount"), 1);
        });
      });
    });
    return describe('persistence', function() {
      var user;
      user = null;
      beforeEach(function() {
        return user = new App.User({
          firstName: "Lance"
        });
      });
      test('boolean', function(done) {
        var _this = this;
        assert.equal(user.get('admin'), false);
        return user.save(function() {
          return App.User.find(user.get('id'), function(error, user) {
            assert.equal(user.get('admin'), false);
            user.set("admin", true);
            assert.equal(user.get('admin'), true);
            return user.save(function() {
              return App.User.find(user.get('id'), function(error, user) {
                assert.equal(user.get('admin'), true);
                return done();
              });
            });
          });
        });
      });
      test('integer', function(done) {
        var _this = this;
        assert.equal(user.get('likes'), 0);
        return user.save(function() {
          return App.User.find(user.get('id'), function(error, user) {
            assert.equal(user.get('likes'), 0);
            user.set("likes", 5.12);
            assert.equal(user.get('likes'), 5);
            return user.save(function() {
              return App.User.find(user.get('id'), function(error, user) {
                assert.equal(user.get('likes'), 5);
                return done();
              });
            });
          });
        });
      });
      return test('float', function(done) {
        var _this = this;
        assert.equal(user.get('rating'), 2.5);
        return user.save(function() {
          return App.User.find(user.get('id'), function(error, user) {
            assert.equal(user.get('rating'), 2.5);
            user.set("rating", 3.4);
            assert.equal(user.get('rating'), 3.4);
            return user.save(function() {
              return App.User.find(user.get('id'), function(error, user) {
                assert.equal(user.get('rating'), 3.4);
                return done();
              });
            });
          });
        });
      });
    });
  });
};

describeWith(Tower.Store.Memory);

if (Tower.client) {
  describeWith(Tower.Store.Ajax);
} else {
  describeWith(Tower.Store.MongoDB);
}
