var cursor, scope,
  __hasProp = {}.hasOwnProperty,
  __extends =   function(child, parent) { 
    if(typeof parent.__extend == 'function') return parent.__extend(child);
      
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if(typeof parent.extended == 'function') parent.extended(child); 
    return child; 
};

scope = null;

cursor = null;

App.CursorTest = (function(_super) {
  var CursorTest;

  function CursorTest() {
    return CursorTest.__super__.constructor.apply(this, arguments);
  }

  CursorTest = __extends(CursorTest, _super);

  CursorTest.field("string", {
    type: "String"
  });

  CursorTest.field("integer", {
    type: "Integer"
  });

  CursorTest.field("float", {
    type: "Float"
  });

  CursorTest.field("date", {
    type: "Date"
  });

  CursorTest.field("object", {
    type: "Object",
    "default": {}
  });

  CursorTest.field("arrayString", {
    type: ["String"],
    "default": []
  });

  CursorTest.field("arrayObject", {
    type: ["Object"],
    "default": []
  });

  return CursorTest;

})(Tower.Model);

describe('Tower.Model.Cursor', function() {
  beforeEach(function() {
    cursor = Tower.Model.Cursor.create();
    return cursor.make();
  });
  afterEach(function() {
    return cursor = null;
  });
  describe('#where', function() {
    it('`$in: [1, 2, 3]`', function() {
      cursor.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      return assert.deepEqual(cursor.conditions(), {
        id: {
          '$in': [1, 2, 3]
        }
      });
    });
    it('2 parts: `$in: [1, 2, 3], $in: [4, 5, 6]`', function() {
      cursor.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      cursor.where({
        id: {
          $in: [4, 5, 6]
        }
      });
      return assert.deepEqual(cursor.conditions(), {
        id: {
          '$in': [1, 2, 3, 4, 5, 6]
        }
      });
    });
    it('2 different keys: `$in: [1, 2, 3], $nin: [4, 5, 6]`', function() {
      cursor.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      cursor.where({
        id: {
          $nin: [4, 5, 6]
        }
      });
      return assert.deepEqual(cursor.conditions(), {
        id: {
          '$in': [1, 2, 3],
          '$nin': [4, 5, 6]
        }
      });
    });
    test('before: `id: $in: [1, 2, 3]`, after: `id: 10`', function() {
      cursor.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      cursor.where({
        id: 10
      });
      return assert.deepEqual(cursor.conditions(), {
        id: 10
      });
    });
    return test('before: `id: 10`, after: `id: $in: [1, 2, 3]`, ', function() {
      cursor.where({
        id: 10
      });
      cursor.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      return assert.deepEqual(cursor.conditions(), {
        id: {
          '$in': [1, 2, 3]
        }
      });
    });
  });
  describe('#order', function() {
    test('sort by one property', function() {
      cursor.order("firstName", "asc");
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('order'), [['firstName', 'asc']]);
    });
    test('sort by two properties', function() {
      cursor.order("firstName", "asc");
      cursor.order("lastName", "desc");
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('order'), [['firstName', 'asc'], ['lastName', 'desc']]);
    });
    return test('sort default equals `asc`', function() {
      cursor.order("firstName");
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('order'), [['firstName', 'asc']]);
    });
  });
  describe('#limit', function() {
    it('should limit', function() {
      cursor.limit(20);
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('limit'), 20);
    });
    return it('should override limit', function() {
      cursor.limit(20);
      cursor.limit(100);
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('limit'), 100);
    });
  });
  describe('#offset', function() {
    it('should offset', function() {
      cursor.offset(20);
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('offset'), 20);
    });
    return it('should override offset', function() {
      cursor.offset(20);
      cursor.offset(100);
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('offset'), 100);
    });
  });
  describe('#paginate', function() {
    test('pagination', function() {
      cursor.paginate({
        perPage: 20,
        page: 20
      });
      assert.deepEqual(cursor.conditions(), {});
      assert.deepEqual(cursor.get('limit'), 20);
      return assert.deepEqual(cursor.get('offset'), 380);
    });
    test('override pagination', function() {
      cursor.paginate({
        perPage: 20,
        page: 20
      });
      cursor.paginate({
        perPage: 20,
        page: 2
      });
      assert.deepEqual(cursor.conditions(), {});
      assert.deepEqual(cursor.get('limit'), 20);
      return assert.deepEqual(cursor.get('offset'), 20);
    });
    return test('page', function() {
      cursor.page(20);
      assert.deepEqual(cursor.conditions(), {});
      return assert.deepEqual(cursor.get('offset'), 380);
    });
  });
  describe('integrated queries', function() {
    return test('query, sort, and pagination', function() {
      var conditions;
      cursor.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      cursor.where({
        id: {
          $in: [4, 5, 6]
        }
      });
      cursor.where({
        name: {
          "!~": /[a-z]/
        }
      });
      cursor.where({
        name: {
          "=~": /[0-9]/
        }
      });
      cursor.order("name", "asc");
      cursor.paginate({
        perPage: 20,
        page: 2
      });
      conditions = cursor.conditions();
      assert.deepEqual(conditions.id, {
        '$in': [1, 2, 3, 4, 5, 6]
      });
      assert.deepEqual(conditions.name['!~'].toString(), /[a-z]/.toString());
      assert.deepEqual(conditions.name['=~'].toString(), /[0-9]/.toString());
      assert.deepEqual(cursor.get('limit'), 20);
      assert.deepEqual(cursor.get('offset'), 20);
      return assert.deepEqual(cursor.get('order'), [["name", "asc"]]);
    });
  });
  test('#clone', function() {
    return assert.ok(cursor.clone());
  });
  test('#allIn', function() {});
  describe('#test', function() {
    beforeEach(function() {
      cursor = Tower.Model.Cursor.create();
      return cursor.make({
        model: App.CursorTest
      });
    });
    test('eq', function() {
      cursor.where({
        string: 'a string'
      });
      assert.isTrue(cursor.test(App.CursorTest["new"]({
        string: 'a string'
      })));
      return assert.isFalse(cursor.test(new App.CursorTest({
        string: 'a strin'
      })));
    });
    test('neq', function() {
      cursor.where({
        string: {
          '!=': 'a string'
        }
      });
      assert.isFalse(cursor.test(new App.CursorTest({
        string: 'a string'
      })));
      return assert.isTrue(cursor.test(new App.CursorTest({
        string: 'a strin'
      })));
    });
    return test('$or', function() {
      cursor.where({
        $or: [
          {
            string: {
              '==': 'a string'
            }
          }, {
            integer: {
              '<': 10
            }
          }
        ]
      });
      assert.isTrue(cursor.test(new App.CursorTest({
        string: 'a string'
      })));
      assert.isTrue(cursor.test(new App.CursorTest({
        string: 'a string',
        integer: 9
      })));
      assert.isTrue(cursor.test(new App.CursorTest({
        string: 'a strin',
        integer: 9
      })));
      assert.isFalse(cursor.test(new App.CursorTest({
        string: 'a strin'
      })));
      return assert.isFalse(cursor.test(new App.CursorTest({
        string: 'a strin',
        integer: 10
      })));
    });
  });
  describe('#addIds', function() {
    return test('addIds', function() {
      return cursor.addIds(1, 2, 3);
    });
  });
  return describe('#create', function() {
    beforeEach(function() {
      cursor = Tower.Model.Cursor.create();
      return cursor.make({
        model: App.CursorTest
      });
    });
    test('create()', function(done) {
      var _this = this;
      return cursor.insert(function(error, result) {
        assert.ok(result instanceof Tower.Model, 'result instanceof Tower.Model');
        assert.equal(void 0, result.get('integer'));
        return done();
      });
    });
    return test('create(integer: 10)', function(done) {
      var _this = this;
      cursor.addData({
        integer: 10
      });
      return cursor.insert(function(error, result) {
        assert.ok(result instanceof Tower.Model, 'result instanceof Tower.Model');
        assert.equal(10, result.get('integer'));
        return done();
      });
    });
  });
});
