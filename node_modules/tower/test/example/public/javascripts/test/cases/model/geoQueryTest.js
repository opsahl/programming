var address, coordinates, describeWith, places;

address = null;

places = {
  "Brandenburg Gate, Berlin": {
    latitude: 52.516272,
    longitude: 13.377722
  },
  "Dortmund U-Tower": {
    latitude: 51.515,
    longitude: 7.453619
  },
  "London Eye": {
    latitude: 51.503333,
    longitude: -0.119722
  },
  "Kremlin, Moscow": {
    latitude: 55.751667,
    longitude: 37.617778
  },
  "Eiffel Tower, Paris": {
    latitude: 48.8583,
    longitude: 2.2945
  },
  "Riksdag building, Stockholm": {
    latitude: 59.3275,
    longitude: 18.0675
  },
  "Royal Palace, Oslo": {
    latitude: 59.916911,
    longitude: 10.727567
  }
};

coordinates = {
  paris: places["Eiffel Tower, Paris"],
  moscow: places["Kremlin, Moscow"],
  london: places["London Eye"]
};

describeWith = function(store) {
  return describe("Tower.Geo (Tower.Store." + store.name + ")", function() {
    beforeEach(function(done) {
      var _this = this;
      return store.clean(function() {
        App.Address.store(store);
        return done();
      });
    });
    describe('units', function() {
      return test('miles', function() {});
    });
    describe('Address.coordinates', function() {
      beforeEach(function(done) {
        address = new App.Address;
        return done();
      });
      test('field.type', function() {
        var field;
        field = App.Address.fields().coordinates;
        return assert.equal(field.type, "Geo");
      });
      test('serialize from object', function() {
        address.set('coordinates', coordinates.paris);
        return assert.deepEqual(address.get('coordinates'), {
          lat: 48.8583,
          lng: 2.2945
        });
      });
      test('serialize from array', function() {
        address.set('coordinates', [48.8583, 2.2945]);
        return assert.deepEqual(address.get('coordinates'), {
          lat: 48.8583,
          lng: 2.2945
        });
      });
      return test('serialize from string', function() {
        address.set('coordinates', "48.8583,2.2945");
        return assert.deepEqual(address.get('coordinates'), {
          lat: 48.8583,
          lng: 2.2945
        });
      });
    });
    return describe('persistence', function() {
      beforeEach(function(done) {
        var coordinates, data, iterator, name;
        data = [];
        for (name in places) {
          coordinates = places[name];
          data.push(coordinates);
        }
        iterator = function(coordinates, next) {
          return App.Address.create({
            coordinates: coordinates
          }, next);
        };
        return async.forEachSeries(data, iterator, done);
      });
      test('near', function(done) {
        var paris,
          _this = this;
        paris = coordinates.paris;
        return App.Address.near({
          lat: paris.latitude,
          lng: paris.longitude
        }).all(function(error, records) {
          assert.equal(records.length, 7);
          return done();
        });
      });
      return describe('within', function() {
        test('within(5)');
        test('within(5, "miles")');
        return test('within(distance: 5, unit: "miles")');
      });
    });
  });
};

if (!Tower.client) {
  describeWith(Tower.Store.MongoDB);
}
