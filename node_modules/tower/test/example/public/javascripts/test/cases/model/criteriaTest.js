var criteria, scope;

scope = null;

criteria = null;

describe('Tower.Model.Criteria', function() {
  beforeEach(function() {
    return criteria = new Tower.Model.Criteria;
  });
  afterEach(function() {
    return criteria = null;
  });
  describe('#where', function() {
    it('`$in: [1, 2, 3]`', function() {
      criteria.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      return assert.deepEqual(criteria.conditions(), {
        id: {
          '$in': [1, 2, 3]
        }
      });
    });
    it('2 parts: `$in: [1, 2, 3], $in: [4, 5, 6]`', function() {
      criteria.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      criteria.where({
        id: {
          $in: [4, 5, 6]
        }
      });
      return assert.deepEqual(criteria.conditions(), {
        id: {
          '$in': [1, 2, 3, 4, 5, 6]
        }
      });
    });
    it('2 different keys: `$in: [1, 2, 3], $nin: [4, 5, 6]`', function() {
      criteria.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      criteria.where({
        id: {
          $nin: [4, 5, 6]
        }
      });
      return assert.deepEqual(criteria.conditions(), {
        id: {
          '$in': [1, 2, 3],
          '$nin': [4, 5, 6]
        }
      });
    });
    test('before: `id: $in: [1, 2, 3]`, after: `id: 10`', function() {
      criteria.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      criteria.where({
        id: 10
      });
      return assert.deepEqual(criteria.conditions(), {
        id: 10
      });
    });
    return test('before: `id: 10`, after: `id: $in: [1, 2, 3]`, ', function() {
      criteria.where({
        id: 10
      });
      criteria.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      return assert.deepEqual(criteria.conditions(), {
        id: {
          '$in': [1, 2, 3]
        }
      });
    });
  });
  describe('#order', function() {
    test('sort by one property', function() {
      criteria.order("firstName", "asc");
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('order'), [['firstName', 'asc']]);
    });
    test('sort by two properties', function() {
      criteria.order("firstName", "asc");
      criteria.order("lastName", "desc");
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('order'), [['firstName', 'asc'], ['lastName', 'desc']]);
    });
    return test('sort default equals `asc`', function() {
      criteria.order("firstName");
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('order'), [['firstName', 'asc']]);
    });
  });
  describe('#limit', function() {
    it('should limit', function() {
      criteria.limit(20);
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('limit'), 20);
    });
    return it('should override limit', function() {
      criteria.limit(20);
      criteria.limit(100);
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('limit'), 100);
    });
  });
  describe('#offset', function() {
    it('should offset', function() {
      criteria.offset(20);
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('offset'), 20);
    });
    return it('should override offset', function() {
      criteria.offset(20);
      criteria.offset(100);
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('offset'), 100);
    });
  });
  describe('#paginate', function() {
    test('pagination', function() {
      criteria.paginate({
        perPage: 20,
        page: 20
      });
      assert.deepEqual(criteria.conditions(), {});
      assert.deepEqual(criteria.get('limit'), 20);
      return assert.deepEqual(criteria.get('offset'), 380);
    });
    test('override pagination', function() {
      criteria.paginate({
        perPage: 20,
        page: 20
      });
      criteria.paginate({
        perPage: 20,
        page: 2
      });
      assert.deepEqual(criteria.conditions(), {});
      assert.deepEqual(criteria.get('limit'), 20);
      return assert.deepEqual(criteria.get('offset'), 20);
    });
    return test('page', function() {
      criteria.page(20);
      assert.deepEqual(criteria.conditions(), {});
      return assert.deepEqual(criteria.get('offset'), 380);
    });
  });
  describe('integrated queries', function() {
    return test('query, sort, and pagination', function() {
      var conditions;
      criteria.where({
        id: {
          $in: [1, 2, 3]
        }
      });
      criteria.where({
        id: {
          $in: [4, 5, 6]
        }
      });
      criteria.where({
        name: {
          "!~": /[a-z]/
        }
      });
      criteria.where({
        name: {
          "=~": /[0-9]/
        }
      });
      criteria.order("name", "asc");
      criteria.paginate({
        perPage: 20,
        page: 2
      });
      conditions = criteria.conditions();
      assert.deepEqual(conditions.id, {
        '$in': [1, 2, 3, 4, 5, 6]
      });
      assert.deepEqual(conditions.name['!~'].toString(), /[a-z]/.toString());
      assert.deepEqual(conditions.name['=~'].toString(), /[0-9]/.toString());
      assert.deepEqual(criteria.get('limit'), 20);
      assert.deepEqual(criteria.get('offset'), 20);
      return assert.deepEqual(criteria.get('order'), [["name", "asc"]]);
    });
  });
  test('#clone', function() {
    return assert.ok(criteria.clone());
  });
  return test('#allIn', function() {});
});
