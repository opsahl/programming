var describeWith, user;

user = null;

describeWith = function(store) {
  return describe("Tower.Model.Persistence (Tower.Store." + store.name + ")", function() {
    beforeEach(function(done) {
      var _this = this;
      return store.clean(function() {
        App.User.store(store);
        return done();
      });
    });
    describe('new', function() {
      return test('#isNew', function() {
        user = new App.User;
        return assert.ok(user.isNew());
      });
    });
    describe('create', function() {
      test('with no attributes (missing required attributes)', function(done) {
        var _this = this;
        return App.User.create(function(error, record) {
          assert.deepEqual(record.errors, {
            "firstName": ["firstName can't be blank"]
          });
          return App.User.count(function(error, count) {
            assert.equal(count, 0);
            return done();
          });
        });
      });
      test('with valid attributes', function(done) {
        var _this = this;
        return App.User.create({
          firstName: "Lance"
        }, function(error, record) {
          assert.deepEqual(record.errors, {});
          return App.User.count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
      });
      test('with multiple with valid attributes as array', function(done) {
        var _this = this;
        return App.User.create([
          {
            firstName: "Lance"
          }, {
            firstName: "Dane"
          }
        ], function(error, records) {
          assert.equal(records.length, 2);
          return App.User.count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
      });
      return test('with multiple with valid attributes as arguments', function(done) {
        var _this = this;
        return App.User.create({
          firstName: "Lance"
        }, {
          firstName: "Dane"
        }, function(error, records) {
          assert.equal(records.length, 2);
          return App.User.count(function(error, count) {
            assert.equal(count, 2);
            return done();
          });
        });
      });
    });
    describe('#save', function() {
      return test('throw error if readOnly', function(done) {
        user = new App.User({}, {
          readOnly: true
        });
        assert.throws(function() {
          return user.save();
        }, "Record is read only");
        return done();
      });
    });
    describe('update', function() {
      beforeEach(function(done) {
        var attributes;
        attributes = [];
        attributes.push({
          id: 1,
          firstName: "Lance"
        });
        attributes.push({
          id: 2,
          firstName: "Dane"
        });
        return App.User.create(attributes, done);
      });
      test('update string property', function(done) {
        var _this = this;
        return App.User.update({
          firstName: "John"
        }, function(error) {
          return App.User.all(function(error, users) {
            var user, _i, _len;
            assert.equal(users.length, 2);
            for (_i = 0, _len = users.length; _i < _len; _i++) {
              user = users[_i];
              assert.equal(user.get("firstName"), "John");
            }
            return done();
          });
        });
      });
      return test('update matching string property', function(done) {
        var _this = this;
        return App.User.where({
          firstName: "Lance"
        }).update({
          firstName: "John"
        }, function(error) {
          return App.User.where({
            firstName: "John"
          }).count(function(error, count) {
            assert.equal(count, 1);
            return done();
          });
        });
      });
    });
    describe('#update', function() {
      beforeEach(function(done) {
        var _this = this;
        return App.User.create({
          id: 1,
          firstName: "Lance"
        }, function(error, record) {
          user = record;
          return App.User.create({
            id: 2,
            firstName: "Dane"
          }, done);
        });
      });
      test('update string property with updateAttributes', function(done) {
        var _this = this;
        return user.updateAttributes({
          firstName: "John"
        }, function(error) {
          assert.equal(user.get("firstName"), "John");
          return done();
        });
      });
      return test('update string property with save', function(done) {
        var _this = this;
        user.set("firstName", "John");
        return user.save(function(error) {
          assert.equal(user.get("firstName"), "John");
          return done();
        });
      });
    });
    describe('destroy', function() {
      beforeEach(function(done) {
        var _this = this;
        return App.User.create({
          id: 1,
          firstName: "Lance!!!"
        }, function(error, result) {
          user = result;
          return App.User.create({
            id: 2,
            firstName: "Dane"
          }, done);
        });
      });
      test('destroy all', function(done) {
        var _this = this;
        return App.User.count(function(error, count) {
          assert.equal(count, 2);
          return App.User.destroy(function(error) {
            return App.User.count(function(error, count) {
              assert.equal(count, 0);
              return done();
            });
          });
        });
      });
      return test('destroy matching', function(done) {
        var _this = this;
        return App.User.count(function(error, count) {
          assert.equal(count, 2);
          return App.User.where({
            firstName: "Dane"
          }).destroy(function(error) {
            return App.User.count(function(error, count) {
              assert.equal(count, 1);
              return done();
            });
          });
        });
      });
    });
    return describe('reload', function() {
      return test('reload');
    });
  });
};

describeWith(Tower.Store.Memory);

if (!Tower.client) {
  describeWith(Tower.Store.MongoDB);
}
