var data, describeWith, record,
  __hasProp = {}.hasOwnProperty,
  __extends =   function(child, parent) { 
    if(typeof parent.__extend == 'function') return parent.__extend(child);
      
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if(typeof parent.extended == 'function') parent.extended(child); 
    return child; 
};

record = null;

data = null;

App.DataTest = (function(_super) {
  var DataTest;

  function DataTest() {
    return DataTest.__super__.constructor.apply(this, arguments);
  }

  DataTest = __extends(DataTest, _super);

  DataTest.field("title");

  DataTest.field("tags", {
    type: "Array"
  });

  DataTest.field("likes", {
    type: "Integer",
    "default": 0
  });

  DataTest.hasMany("dataItemTests");

  return DataTest;

})(Tower.Model);

App.DataItemTest = (function(_super) {
  var DataItemTest;

  function DataItemTest() {
    return DataItemTest.__super__.constructor.apply(this, arguments);
  }

  DataItemTest = __extends(DataItemTest, _super);

  DataItemTest.field("title");

  DataItemTest.belongsTo("dataTest");

  return DataItemTest;

})(Tower.Model);

describeWith = function(store) {
  return describe("Tower.Model.Data (Tower.Store." + (store.className()) + ")", function() {
    return describe('data', function() {
      beforeEach(function() {
        record = App.DataTest["new"]();
        return data = record.get('data');
      });
      test('#record', function() {
        return assert.deepEqual(record, data.record);
      });
      test('#savedData', function() {
        return assert.deepEqual({}, data.savedData);
      });
      test('#unsavedData', function() {
        return assert.deepEqual({}, data.unsavedData);
      });
      test('get path', function() {
        data.set('something', 'random');
        return assert.equal(record.get('something'), 'random');
      });
      test('dynamicFields: false', function() {
        assert.equal(record.get('dynamicFields'), true);
        record.set('dynamicFields', false);
        assert.equal(record.get('dynamicFields'), false);
        record.set('something', 'random');
        return assert.equal(record.get('something'), void 0);
      });
      test('unsavedData', function() {
        record.set('something', 'random');
        return assert.deepEqual(record.get('changes'), {
          something: 'random'
        });
      });
      test('setting changed attribute back to undefined', function() {
        record.set('something', 'random');
        record.set('something', void 0);
        return assert.deepEqual(record.get('changes'), {});
      });
      test('setting association', function() {
        var items;
        items = [new App.DataItemTest];
        record.set('dataItemTests', items);
        return assert.deepEqual(record.get('dataItemTests'), items);
      });
      test('removing association', function() {
        var items;
        items = [new App.DataItemTest];
        record.set('dataItemTests', items);
        record.set('dataItemTests', void 0);
        return assert.deepEqual(record.get('changes'), {});
      });
      test('getting association in changes hash', function() {
        var items;
        items = [new App.DataItemTest];
        record.set('dataItemTests', items);
        return assert.deepEqual(record.get('changes'), {
          dataItemTests: items
        });
      });
      return describe('attribute modifiers', function() {
        return test('set', function() {
          data.set('title', 'A Title');
          assert.equal('A Title', data.get('title'));
          assert.equal('A Title', data.unsavedData.title);
          assert.equal(void 0, data.savedData.title);
          data.set('title', void 0);
          assert.equal(void 0, data.get('title'));
          assert.equal(void 0, data.unsavedData.title);
          return assert.equal(void 0, data.savedData.title);
        });
      });
    });
  });
};

/*          
        test 'push', ->
          assert.deepEqual ["ruby"], data.push("tags", "ruby")
          data.push(tags: "javascript")
          assert.deepEqual ["ruby", "javascript"], data.get('tags')
          assert.deepEqual ["ruby", "javascript", "javascript"], data.push('tags', 'javascript')
          
          data.set $push: tags: 'node'
          assert.deepEqual ["ruby", "javascript", "javascript", 'node'], data.get('tags')

        test 'push undesirable', ->
          assert.deepEqual [["ruby"]], data.push("tags", ["ruby"])
          
        test 'pushEach', ->
          assert.deepEqual ["ruby"], data.pushEach("tags", ["ruby"])
          data.pushEach(tags: ["javascript"])
          assert.deepEqual ["ruby", "javascript"], data.get('tags')
          assert.deepEqual ["ruby", "javascript", "javascript"], data.pushEach('tags', 'javascript')
          
          data.set $pushEach: tags: ['node']
          assert.deepEqual ["ruby", "javascript", "javascript", 'node'], data.get('tags')
          
        test 'pushEach undesirable', ->
          assert.deepEqual [["ruby"]], data.pushEach("tags", [["ruby"]])
          
        test 'pull', ->
          data.pushEach("tags", ["ruby", "javascript", "node"])
          
          data.pull('tags', 'javascript')
          
          assert.deepEqual ['ruby', 'node'], data.get('tags')
          
          data.pull(tags: 'ruby')
          
          assert.deepEqual ['node'], data.get('tags')
          
        test 'pullEach', ->
          data.pushEach("tags", ["ruby", "javascript", "node"])
          
          data.pullEach('tags', 'javascript')
          
          assert.deepEqual ['ruby', 'node'], data.get('tags')
          
          data.pullEach(tags: ['ruby', 'node'])
          
          assert.deepEqual [], data.get('tags')
          
        test 'add', ->
          assert.deepEqual ["ruby"], data.add("tags", "ruby")
          data.add(tags: "javascript")
          assert.deepEqual ["ruby", "javascript"], data.get('tags')
          assert.deepEqual ["ruby", "javascript"], data.add('tags', 'javascript')
          
          data.set $add: tags: 'node'
          assert.deepEqual ["ruby", "javascript", 'node'], data.get('tags')
          
        test 'addEach', ->
          assert.deepEqual ["ruby"], data.addEach("tags", "ruby")
          data.addEach(tags: ["javascript"])
          assert.deepEqual ["ruby", "javascript"], data.get('tags')
          assert.deepEqual ["ruby", "javascript"], data.addEach('tags', ['javascript', 'ruby'])
          
          data.set $addEach: tags: ['node', 'node']
          assert.deepEqual ["ruby", "javascript", 'node'], data.get('tags')
          
        test 'inc', ->
          assert.equal 1, data.inc('likes', 1)
          assert.equal 10, data.inc('likes', 9)
          data.inc(likes: 2)
          assert.equal 12, data.get('likes')
          
          data.set $inc: likes: 3
          assert.equal 15, data.get('likes')
          
        test 'dec', ->
          assert.equal -1, data.inc('likes', -1)
          assert.equal -10, data.inc('likes', -9)
          data.inc(likes: -2)
          assert.equal -12, data.get('likes')
          
          data.set $inc: likes: -3
          assert.equal -15, data.get('likes')
          
        test 'all together', ->
          data.set
            $addEach: tags: ['ruby', 'javascript']
            $inc:     likes: 3
            
          assert.deepEqual data.get('tags'), ['ruby', 'javascript']
          assert.equal data.get('likes'), 3
          
      describe 'associations', ->
        test 'push', ->
          data.push 'dataItemTests', new App.DataItemTest(title: "An item")
          
          assert.equal data.get('dataItemTests')[0].get('title'), 'An item'
          
        test 'add', ->
          data.add 'dataItemTests', new App.DataItemTest(title: "An item")
          data.add 'dataItemTests', new App.DataItemTest(title: "An item")
          
          assert.equal data.get('dataItemTests').length, 2
          
      describe 'state', ->
        beforeEach ->
          data.set
            $addEach: tags: ['ruby', 'javascript']
            $inc:     likes: 3
            
        test 'rollback', ->
          data.rollback()
          assert.deepEqual data.unsavedData, {}
      
    describe 'new, unpersisted record', ->
      beforeEach ->
        record = new App.DataTest
        
      test 'initialize', ->
        assert.ok record.get('data') instanceof Tower.Model.Data
        
    describe 'persistent record', ->
      beforeEach (done) ->
        App.DataTest.create title: "Data", (error, r) =>
          record = record
          done()
          
      #test 'set', ->
      #  console.log record.get('data')
*/


describeWith(Tower.Store.Memory);

/*
if Tower.client
  describeWith(Tower.Store.Ajax)
else
  describeWith(Tower.Store.MongoDB)
*/

