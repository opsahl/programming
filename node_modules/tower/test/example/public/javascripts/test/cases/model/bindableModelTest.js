var __hasProp = {}.hasOwnProperty,
  __extends =   function(child, parent) { 
    if(typeof parent.__extend == 'function') return parent.__extend(child);
      
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if(typeof parent.extended == 'function') parent.extended(child); 
    return child; 
};

App.BindableTest = (function(_super) {
  var BindableTest;

  function BindableTest() {
    return BindableTest.__super__.constructor.apply(this, arguments);
  }

  BindableTest = __extends(BindableTest, _super);

  BindableTest.field('string');

  BindableTest.field('integer', {
    type: 'Integer'
  });

  BindableTest.field('date', {
    type: 'Date'
  });

  return BindableTest;

})(Tower.Model);

describe('Tower.Model (bindable)', function() {
  var record;
  record = null;
  beforeEach(function() {
    return record = new App.BindableTest;
  });
  test('string', function(done) {
    record.addObserver('string', function(o, key, value) {
      assert.equal('abc', value);
      assert.equal('abc', record.get('string'));
      assert.equal('abc', record.get('data').unsavedData.string);
      return done();
    });
    return record.set('string', 'abc');
  });
  test('integer', function(done) {
    record.addObserver('integer', function(o, key, value) {
      assert.equal(10, value);
      assert.equal(10, record.get('integer'));
      assert.equal(10, record.get('data').unsavedData.integer);
      return done();
    });
    return record.set('integer', 10);
  });
  return test('date', function(done) {
    var now;
    now = new Date;
    record.addObserver('date', function(o, key, value) {
      assert.equal(now.getTime(), value.getTime());
      assert.equal(now.getTime(), record.get('date').getTime());
      assert.equal(now.getTime(), record.get('data').unsavedData.date.getTime());
      return done();
    });
    return record.set('date', now);
  });
});
