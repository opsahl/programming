var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

describe('Tower.Store', function() {
  test('.queryOperators', function() {
    var key, queryOperators, value, _results;
    queryOperators = {
      ">=": "$gte",
      "$gte": "$gte",
      ">": "$gt",
      "$gt": "$gt",
      "<=": "$lte",
      "$lte": "$lte",
      "<": "$lt",
      "$lt": "$lt",
      "$in": "$in",
      "$any": "$in",
      "$nin": "$nin",
      "$all": "$all",
      "=~": "$regex",
      "$m": "$regex",
      "$regex": "$regex",
      "$match": "$regex",
      "$notMatch": "$notMatch",
      "!~": "$nm",
      "$nm": "$nm",
      "=": "$eq",
      "$eq": "$eq",
      "!=": "$neq",
      "$neq": "$neq",
      "$null": "$null",
      "$notNull": "$notNull"
    };
    _results = [];
    for (key in queryOperators) {
      value = queryOperators[key];
      _results.push(assert.equal(Tower.Store.queryOperators[key], value));
    }
    return _results;
  });
  test('.atomicModifiers', function() {
    var atomicModifiers, key, value, _results;
    atomicModifiers = {
      "$set": "$set",
      "$unset": "$unset",
      "$push": "$push",
      "$pushAll": "$pushAll",
      "$pull": "$pull",
      "$pullAll": "$pullAll",
      "$inc": "$inc",
      "$pop": "$pop"
    };
    _results = [];
    for (key in atomicModifiers) {
      value = atomicModifiers[key];
      _results.push(assert.equal(Tower.Store.atomicModifiers[key], value));
    }
    return _results;
  });
  test('.defaultLimit', function() {
    return assert.equal(Tower.Store.defaultLimit, 100);
  });
  describe('#update', function() {
    test('{ $push : { field : value }');
    test('{ $inc : { field : value } }');
    test('{ $set : { field : value } }');
    test('{ $unset : { field : 1} }');
    test('{ $push : { field : value } }');
    test('{ $pushAll : { field : valueArray } }');
    test('{ $addToSet : { field : value } }');
    test('{ $pop : { field : 1  } }');
    test('{ $pop : { field : -1  } }');
    test('{ $pull : { field : _value } }');
    return test('{ $pullAll : { field : value_array } }');
  });
  return test('stores are unique per subclass', function() {
    var A, B, X, Y;
    A = (function(_super) {

      __extends(A, _super);

      A.name = 'A';

      function A() {
        return A.__super__.constructor.apply(this, arguments);
      }

      return A;

    })(Tower.Model);
    B = (function(_super) {

      __extends(B, _super);

      B.name = 'B';

      function B() {
        return B.__super__.constructor.apply(this, arguments);
      }

      return B;

    })(A);
    X = (function(_super) {

      __extends(X, _super);

      X.name = 'X';

      function X() {
        return X.__super__.constructor.apply(this, arguments);
      }

      X.store();

      return X;

    })(Tower.Model);
    Y = (function(_super) {

      __extends(Y, _super);

      Y.name = 'Y';

      function Y() {
        return Y.__super__.constructor.apply(this, arguments);
      }

      return Y;

    })(X);
    assert.equal(A.store().className, "App.A");
    assert.equal(B.store().className, "App.B");
    assert.equal(X.store().className, "App.X");
    return assert.equal(Y.store().className, "App.Y");
  });
});
