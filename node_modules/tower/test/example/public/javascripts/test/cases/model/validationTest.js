var criteria, describeWith, record, scope, user;

scope = null;

criteria = null;

user = null;

record = null;

describeWith = function(store) {
  return describe("Tower.Model.Validation (Tower.Store." + store.name + ")", function() {
    beforeEach(function(done) {
      App.User.store(store);
      App.Validatable.store(store);
      user = new App.User({
        id: 1
      });
      record = new App.Validatable();
      return done();
    });
    it('should be invalid', function() {
      assert.deepEqual(user.validate(), false);
      assert.deepEqual(user.errors.firstName, ["firstName can't be blank"]);
      user.set("firstName", "Joe");
      assert.deepEqual(user.validate(), true);
      assert.deepEqual(user.errors, []);
      user.set("firstName", null);
      assert.deepEqual(user.validate(), false);
      return assert.deepEqual(user.errors.firstName, ["firstName can't be blank"]);
    });
    it('should validate from attribute definition', function() {
      var page;
      page = new App.Page({
        title: "A App.Page"
      });
      assert.deepEqual(page.validate(), false);
      assert.deepEqual(page.errors.rating, ['rating must be a minimum of 0', 'rating must be a maximum of 10']);
      page.set("rating", 10);
      page.validate();
      assert.deepEqual(page.validate(), true);
      return assert.deepEqual(page.errors, []);
    });
    describe('presence', function() {
      test('field "name", required: true', function() {
        var field, validators;
        field = App.Validatable.fields().string_requiredTrue;
        validators = field.validators();
        assert.equal(validators.length, 1);
        return assert.equal(validators[0].name, "required");
      });
      return test('field "name"; @validates "name", presence: true', function() {
        var field, validators;
        field = App.Validatable.fields().string_presenceTrue;
        validators = field.validators();
        assert.equal(validators.length, 1);
        return assert.equal(validators[0].name, "presence");
      });
    });
    describe('format', function() {
      test('field "name", format: /^[a-z]/', function() {
        var field, validator, validators;
        field = App.Validatable.fields()["string_format_a_z"];
        validators = field.validators();
        validator = validators[0];
        assert.equal(validator.value.toString(), /^[a-z]/.toString());
        record.set('string_format_a_z', 'asdf');
        assert.equal(validator.validate(record, 'string_format_a_z', record.errors), true);
        record.set('string_format_a_z', '1asdf');
        return assert.equal(validator.validate(record, 'string_format_a_z', record.errors), false);
      });
      test('field "name", format: "email"', function() {
        var field, validator, validators;
        field = App.Validatable.fields()["string_formatEmail"];
        validators = field.validators();
        validator = validators[0];
        assert.equal(validator.value, "email");
        record.set('string_formatEmail', 'example@example.com');
        assert.equal(validator.validate(record, 'string_formatEmail', record.errors), true);
        record.set('string_formatEmail', 'example.com');
        return assert.equal(validator.validate(record, 'string_formatEmail', record.errors), false);
      });
      test('field "name", format: "phone"', function() {
        var validator;
        validator = App.Validatable.validators("string_formatPhone")[0];
        record.set('string_formatPhone', '123 456 7890');
        assert.equal(validator.validate(record, 'string_formatPhone', record.errors), true);
        record.set('string_formatPhone', '123');
        return assert.equal(validator.validate(record, 'string_formatPhone', record.errors), false);
      });
      test('field "name", format: "slug"', function() {
        var validator;
        validator = App.Validatable.validators("string_formatSlug")[0];
        record.set('string_formatSlug', 'a-slug');
        assert.equal(validator.validate(record, 'string_formatSlug', record.errors), true);
        record.set('string_formatSlug', 'a slug');
        return assert.equal(validator.validate(record, 'string_formatSlug', record.errors), false);
      });
      test('field "name", format: "creditCard"', function() {
        var validator;
        validator = App.Validatable.validators("string_formatCreditCard")[0];
        record.set('string_formatCreditCard', '4111111111111111');
        assert.equal(validator.validate(record, 'string_formatCreditCard', record.errors), true);
        record.set('string_formatCreditCard', '4111111111111');
        return assert.equal(validator.validate(record, 'string_formatCreditCard', record.errors), false);
      });
      test('field "name", format: "postalCode"', function() {
        var validator;
        validator = App.Validatable.validators("string_formatPostalCode")[0];
        record.set('string_formatPostalCode', '91941');
        assert.equal(validator.validate(record, 'string_formatPostalCode', record.errors), true);
        record.set('string_formatPostalCode', '9194');
        return assert.equal(validator.validate(record, 'string_formatPostalCode', record.errors), false);
      });
      return test('field "name", format: value: /^\d+$/', function() {
        var validator;
        validator = App.Validatable.validators("string_format_withOption")[0];
        record.set('string_format_withOption', '91941');
        assert.equal(validator.validate(record, 'string_format_withOption', record.errors), true);
        record.set('string_format_withOption', 'abc91941');
        return assert.equal(validator.validate(record, 'string_format_withOption', record.errors), false);
      });
    });
    describe('length, min, max', function() {
      test('field "name", type: "Integer", min: 5', function() {
        var validator;
        validator = App.Validatable.validators("integer_min")[0];
        record.set('integer_min', 6);
        assert.equal(validator.validate(record, 'integer_min', record.errors), true);
        record.set('integer_min', 4);
        return assert.equal(validator.validate(record, 'integer_min', record.errors), false);
      });
      test('field "name", type: "Integer", max: 12', function() {
        var validator;
        validator = App.Validatable.validators("integer_max")[0];
        record.set('integer_max', 11);
        assert.equal(validator.validate(record, 'integer_max', record.errors), true);
        record.set('integer_max', 13);
        return assert.equal(validator.validate(record, 'integer_max', record.errors), false);
      });
      return test('field "name", type: "Integer", min: -> 5', function() {
        var validator;
        validator = App.Validatable.validators("integer_minFunction")[0];
        record.set('integer_minFunction', 6);
        assert.equal(validator.validate(record, 'integer_minFunction', record.errors), true);
        record.set('integer_minFunction', 4);
        return assert.equal(validator.validate(record, 'integer_minFunction', record.errors), false);
      });
    });
    describe('date', function() {
      test('field "name", type: "Date", ">=": -> _(20).days().ago()', function() {
        var validator;
        validator = App.Validatable.validators("date_gte")[0];
        record.set('date_gte', new Date);
        assert.equal(validator.validate(record, 'date_gte', record.errors), true);
        record.set('date_gte', _(100).days().ago().toDate());
        return assert.equal(validator.validate(record, 'date_gte', record.errors), false);
      });
      return test('field "name", type: "Date", "<": -> _(20).days().ago()', function() {
        var validator;
        validator = App.Validatable.validators("date_lt")[0];
        record.set('date_lt', _(100).days().ago().toDate());
        assert.equal(validator.validate(record, 'date_lt', record.errors), true);
        record.set('date_lt', _(5).days().ago().toDate());
        return assert.equal(validator.validate(record, 'date_lt', record.errors), false);
      });
    });
    describe('enumerable', function() {
      test('field "name", in: ["male", "female"]', function() {
        var validator;
        validator = App.Validatable.validators("string_in")[0];
        record.set('string_in', 'male');
        assert.equal(validator.validate(record, 'string_in', record.errors), true);
        record.set('string_in', 'random');
        return assert.equal(validator.validate(record, 'string_in', record.errors), false);
      });
      return test('field "name", notIn: ["male", "female"]', function() {
        var validator;
        validator = App.Validatable.validators("string_notIn")[0];
        record.set('string_notIn', 'random');
        assert.equal(validator.validate(record, 'string_notIn', record.errors), true);
        record.set('string_notIn', 'male');
        return assert.equal(validator.validate(record, 'string_notIn', record.errors), false);
      });
    });
    return describe('multiple fields at once', function() {
      test('field "name", "name2", presence: true, format: /^[a-z]+/, on: "create"', function() {
        var a, all, b, validator, _i, _len, _results;
        a = App.Validatable.validators("onCreate_all1");
        b = App.Validatable.validators("onCreate_all2");
        all = _.flatten(a, b);
        assert.equal(a.length, 2);
        assert.equal(a.length, b.length);
        _results = [];
        for (_i = 0, _len = all.length; _i < _len; _i++) {
          validator = all[_i];
          _results.push(assert.equal(validator.options.on, "create"));
        }
        return _results;
      });
      test('field "name", "name2", presence: true, format: value: /^[a-z]+/, on: "create"', function() {
        var a, all, b, formatValidator, formatValidators, presenceValidator, presenceValidators, _i, _j, _len, _len1, _results;
        a = App.Validatable.validators("onCreate_one1");
        b = App.Validatable.validators("onCreate_one2");
        all = _.flatten(a, b);
        assert.equal(a.length, 2);
        assert.equal(a.length, b.length);
        formatValidators = _.select(all, function(validator) {
          return validator.name === "format";
        });
        presenceValidators = _.select(all, function(validator) {
          return validator.name === "presence";
        });
        for (_i = 0, _len = formatValidators.length; _i < _len; _i++) {
          formatValidator = formatValidators[_i];
          assert.equal(formatValidator.options.on, "create");
        }
        _results = [];
        for (_j = 0, _len1 = presenceValidators.length; _j < _len1; _j++) {
          presenceValidator = presenceValidators[_j];
          _results.push(assert.equal(presenceValidator.options.on, void 0));
        }
        return _results;
      });
      test('field "name", "name2", presence: {if: "method"}, format: unless: "method", value: /^[a-z]+/, on: "create"', function() {
        var a, all, b, formatValidator, formatValidators, presenceValidator, presenceValidators, _i, _j, _len, _len1, _results;
        a = App.Validatable.validators("if_and_unless1");
        b = App.Validatable.validators("if_and_unless2");
        all = _.flatten(a, b);
        assert.equal(a.length, 2);
        assert.equal(a.length, b.length);
        formatValidators = _.select(all, function(validator) {
          return validator.name === "format";
        });
        presenceValidators = _.select(all, function(validator) {
          return validator.name === "presence";
        });
        for (_i = 0, _len = formatValidators.length; _i < _len; _i++) {
          formatValidator = formatValidators[_i];
          assert.equal(formatValidator.options.on, "create");
          assert.equal(formatValidator.options.unless, "ifAndUnlessFormatCheck");
          record.set('if_and_unless1', 'asdf');
          record._ifAndUnlessFormatCheck = false;
          assert.equal(formatValidator.validateEach(record, record.errors), true);
          record._ifAndUnlessFormatCheck = true;
          assert.equal(formatValidator.validateEach(record, record.errors), false);
        }
        _results = [];
        for (_j = 0, _len1 = presenceValidators.length; _j < _len1; _j++) {
          presenceValidator = presenceValidators[_j];
          assert.equal(presenceValidator.options.on, void 0);
          assert.equal(presenceValidator.options["if"], 'ifAndUnlessPresenceCheck');
          record.set('if_and_unless1', 'asdf');
          record._ifAndUnlessPresenceCheck = true;
          assert.equal(presenceValidator.validateEach(record, record.errors), true);
          record._ifAndUnlessPresenceCheck = false;
          _results.push(assert.equal(presenceValidator.validateEach(record, record.errors), false));
        }
        return _results;
      });
      return test('field "name", "name2", presence: true, format: /^[a-z]+/, if: "method"', function() {
        var a, all, b, validator, _i, _len, _results;
        a = App.Validatable.validators("if_global1");
        b = App.Validatable.validators("if_global2");
        all = _.flatten(a, b);
        assert.equal(a.length, 2);
        assert.equal(a.length, b.length);
        _results = [];
        for (_i = 0, _len = all.length; _i < _len; _i++) {
          validator = all[_i];
          record.set('if_global1', 'asdf');
          record._ifGlobal = true;
          assert.equal(validator.validateEach(record, record.errors), true);
          record._ifGlobal = false;
          _results.push(assert.equal(validator.validateEach(record, record.errors), false));
        }
        return _results;
      });
    });
  });
};

describeWith(Tower.Store.Memory);

if (Tower.client) {
  describeWith(Tower.Store.Ajax);
} else {
  describeWith(Tower.Store.MongoDB);
}
