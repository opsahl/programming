var Class, Scope, User, robotManager, user,
  __hasProp = {}.hasOwnProperty,
  __extends =   function(child, parent) { 
    if(typeof parent.__extend == 'function') return parent.__extend(child);
      
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if(typeof parent.extended == 'function') parent.extended(child); 
    return child; 
},
  _this = this;

require('ember-metal');

require('ember-runtime');

require('../lib/tower');

global.window = global;

Class = Ember.Object.extend({
  one: function() {
    return "ONE!";
  }
});

Class.reopenClass({
  something: "asdf"
});

User = (function(_super) {

  function User() {
    return User.__super__.constructor.apply(this, arguments);
  }

  User = __extends(User, _super);

  return User;

})(Class);

/*
Class.reopen two: "asdf"
console.log Class::one
console.log Class::two
klass = new Class
console.log klass.one
console.log Class::one
console.log Class::two
Person = Ember.Object.extend(
  lastName: null
  fullName: Ember.computed(->
    firstName = @get("firstName")
    lastName = @get("lastName")
    firstName + " " + lastName
  ).property("firstName", "lastName")
)
person = Person.create(lastName: "Katz")
person.addObserver "fullName", (object, key, value) ->
  console.log key
  console.log value

person.addObserver "firstName", (object, key, value) ->
  console.log key
  console.log value

person.set "firstName", "Brohuda"
random = {}
Ember.addObserver random, "something", (object, key, value) ->
  console.log "SOMETHING!"
  console.log value

Ember.set random, "something", "a value"
*/


robotManager = Ember.StateManager.create({
  initialState: "poweredDown",
  poweredDown: Ember.State.create({
    enter: function() {},
    exit: function() {
      return console.log("exited poweredDown state");
    },
    charging: Ember.State.create({
      enter: function() {},
      exit: function() {}
    }),
    charged: Ember.State.create({
      enter: function() {
        return console.log("entered charged state");
      },
      exit: function() {
        return console.log("exited charged state");
      }
    })
  }),
  poweredUp: Ember.State.create({
    enter: function() {
      return console.log("entered poweredUp state");
    },
    exit: function() {},
    mobile: Ember.State.create({
      enter: function() {
        return console.log("entered mobile state");
      },
      exit: function() {}
    }),
    stationary: Ember.State.create({
      enter: function() {},
      exit: function() {}
    })
  })
});

Scope = (function(_super) {

  function Scope() {
    return Scope.__super__.constructor.apply(this, arguments);
  }

  Scope = __extends(Scope, _super);

  return Scope;

})(Ember.ArrayProxy);

User = Ember.Object.extend({
  lance: Ember.computed(function() {
    return "POLLARD";
  }),
  didChangeLance: Ember.computed(function() {
    return console.log('lanceDidChange called');
  })
});

user = new User;

console.log(Ember.get(user, 'lance'));

user.set('lance', "LANCE");

user.notifyPropertyChange('lance');

Ember.run.sync();

process.nextTick(function() {
  return console.log("DONE");
});
