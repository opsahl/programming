require('ember-metal')
require('ember-runtime')
require('../lib/tower')

global.window = global

Class = Ember.Object.extend(
  one: -> "ONE!"
)

Class.reopenClass
  something: "asdf"

class User extends Class

#console.log key for key, value of User
#console.log Ember.get(Class, "proto")

###
Class.reopen two: "asdf"
console.log Class::one
console.log Class::two
klass = new Class
console.log klass.one
console.log Class::one
console.log Class::two
Person = Ember.Object.extend(
  lastName: null
  fullName: Ember.computed(->
    firstName = @get("firstName")
    lastName = @get("lastName")
    firstName + " " + lastName
  ).property("firstName", "lastName")
)
person = Person.create(lastName: "Katz")
person.addObserver "fullName", (object, key, value) ->
  console.log key
  console.log value

person.addObserver "firstName", (object, key, value) ->
  console.log key
  console.log value

person.set "firstName", "Brohuda"
random = {}
Ember.addObserver random, "something", (object, key, value) ->
  console.log "SOMETHING!"
  console.log value

Ember.set random, "something", "a value"
###
robotManager = Ember.StateManager.create(
  initialState: "poweredDown"
  poweredDown: Ember.State.create(
    enter: ->

    exit: ->
      console.log "exited poweredDown state"

    charging: Ember.State.create(
      enter: ->

      exit: ->
    )
    charged: Ember.State.create(
      enter: ->
        console.log "entered charged state"

      exit: ->
        console.log "exited charged state"
    )
  )
  poweredUp: Ember.State.create(
    enter: ->
      console.log "entered poweredUp state"

    exit: ->

    mobile: Ember.State.create(
      enter: ->
        console.log "entered mobile state"

      exit: ->
    )
    stationary: Ember.State.create(
      enter: ->

      exit: ->
    )
  )
)
#robotManager.get "currentState.get.path"
#robotManager.goToState "charged"
#robotManager.getPath "currentState.name"
#robotManager.goToState "poweredUp.mobile"

class Scope extends Ember.ArrayProxy

User = Ember.Object.extend
  lance: Ember.computed -> "POLLARD"
  
  didChangeLance: Ember.computed ->
    console.log 'lanceDidChange called'
  
user = new User
console.log Ember.get(user, 'lance')
user.set 'lance', "LANCE"
user.notifyPropertyChange('lance')
Ember.run.sync()
process.nextTick =>
  console.log "DONE"