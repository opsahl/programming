// Generated by CoffeeScript 1.3.3
(function() {
  var ConsoleInterface, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  ConsoleInterface = (function() {

    function ConsoleInterface(_arg, next) {
      var me;
      this.docpad = _arg.docpad, this.program = _arg.program;
      this.selectSkeletonCallback = __bind(this.selectSkeletonCallback, this);

      me = this;
      program = this.program;
      docpad = this.docpad;
      _.bindAll(this, 'run', 'server', 'skeleton', 'render', 'generate', 'watch', 'install', 'clean', 'info', 'cli', 'exit', 'help', 'actionCompleted', 'handleError');
      program.version(docpad.getVersion() || 'unknown').option('-d, --debug [logLevel]', "the level of debug messages you would like to display, if specified defaults to 7, otherwise 6", parseInt).option('-f, --force', "force a re-install of all modules");
      program.command('run').description('does everyting: skeleton, generate, watch, server').option('-s, --skeleton <skeleton>', "for new projects, instead of being asked for the skeleton, you can specify it here").option('-p, --port <port>', "a custom port to use for the server <port>", parseInt).action(function(command) {
        me.applyConfiguration(command);
        return me.run(me.actionCompleted);
      });
      program.command('server').description('creates a server for your generated project').option('-p, --port <port>', "a custom port to use for the server <port>", parseInt).action(function(command) {
        me.applyConfiguration(command);
        return me.server(me.actionCompleted);
      });
      program.command('skeleton').description('will create a new project in your cwd based off an existing skeleton').option('-s, --skeleton <skeleton>', "instead of being asked for the skeleton, you can specify it here").action(function(command) {
        me.applyConfiguration(command);
        return me.skeleton(me.actionCompleted);
      });
      program.command('render <path>').description("render the file at <path> and output its results to stdout").action(function(command) {
        me.applyConfiguration(command);
        return me.render(me.actionCompleted);
      });
      program.command('generate').description("(re)generates your project").action(function(command) {
        me.applyConfiguration(command);
        return me.generate(me.actionCompleted);
      });
      program.command('watch').description("watches your project for changes, and (re)generates whenever a change is made").action(function(command) {
        me.applyConfiguration(command);
        return me.watch(me.actionCompleted);
      });
      program.command('install').description("ensure everything is installed correctly").action(function(command) {
        me.applyConfiguration(command);
        return me.install(me.actionCompleted);
      });
      program.command('clean').description("ensure everything is cleaned correctly (will remove your out directory)").action(function(command) {
        me.applyConfiguration(command);
        return me.clean(me.actionCompleted);
      });
      program.command('info').description("display the information about your docpad instance").action(function(command) {
        me.applyConfiguration(command);
        return me.info(me.actionCompleted);
      });
      program.command('cli').description("start the interactive cli").action(function(command) {
        me.applyConfiguration(command);
        return me.cli(me.actionCompleted);
      });
      program.command('exit').description("exit the interactive cli").action(function(command) {
        me.applyConfiguration(command);
        return me.exit(me.actionCompleted);
      });
      program.command('help').description("output the help").action(function(command) {
        me.applyConfiguration(command);
        return me.help(me.actionCompleted);
      });
      program.command('*').description("anything else ouputs the help").action(function() {
        return program.emit('help', []);
      });
      docpad.emitSync('consoleSetup', {
        "interface": this,
        program: program
      }, function(err) {
        if (err) {
          return handleError(err);
        }
        return typeof next === "function" ? next(null, me) : void 0;
      });
    }

    ConsoleInterface.prototype.start = function(argv) {
      this.program.parse(argv || process.argv);
      return this;
    };

    ConsoleInterface.prototype.getProgram = function() {
      return this.program;
    };

    ConsoleInterface.prototype.handleError = function(err) {
      var docpad;
      docpad = this.docpad;
      docpad.log('error', "Something went wrong with the action");
      docpad.error(err);
      return process.exit(1);
    };

    ConsoleInterface.prototype.actionCompleted = function(err) {
      var docpad, program;
      docpad = this.docpad;
      program = this.program;
      if (err) {
        this.handleError(err);
      } else {
        docpad.log('info', "The action completed successfully");
      }
      if (program.mode === 'cli') {
        console.log('');
        program.emit('cli', []);
      }
      return this;
    };

    ConsoleInterface.prototype.applyConfiguration = function(customConfig) {
      var docpad, key, program, programConfig, value;
      if (customConfig == null) {
        customConfig = {};
      }
      docpad = this.docpad;
      program = this.program;
      programConfig = this.program;
      if (programConfig.debug) {
        if (programConfig.debug === true) {
          programConfig.debug = 7;
        }
        docpad.setLogLevel(programConfig.debug);
        delete programConfig.debug;
      }
      for (key in programConfig) {
        if (!__hasProp.call(programConfig, key)) continue;
        value = programConfig[key];
        if (docpad.config[key] != null) {
          docpad.config[key] = value;
        }
      }
      for (key in customConfig) {
        if (!__hasProp.call(customConfig, key)) continue;
        value = customConfig[key];
        if (docpad.config[key] != null) {
          docpad.config[key] = value;
        }
      }
      return docpad.config;
    };

    ConsoleInterface.prototype.welcome = function() {
      var docpad, version;
      docpad = this.docpad;
      version = docpad.getVersion();
      if (this.welcomed) {
        return;
      }
      this.welcomed = true;
      docpad.log('info', "Welcome to DocPad v" + version);
      return this;
    };

    ConsoleInterface.prototype.selectSkeletonCallback = function(skeletons, next) {
      var docpad, ids, program, skeleton, skeletonDescription, skeletonId;
      program = this.program;
      docpad = this.docpad;
      ids = [];
      console.log(cliColor.bold('You are about to create your new project inside your current directory. Below is a list of skeletons to bootstrap your new project:\n'));
      for (skeletonId in skeletons) {
        if (!__hasProp.call(skeletons, skeletonId)) continue;
        skeleton = skeletons[skeletonId];
        ids.push(skeletonId);
        skeletonDescription = skeleton.description.replace(/\n/g, '\n\t');
        console.log("\t" + (cliColor.bold(skeletonId)) + "\n\t" + skeletonDescription + "\n");
      }
      console.log(cliColor.bold('Which skeleton will you use?'));
      program.choose(ids, function(i) {
        skeletonId = ids[i];
        return next(null, skeletonId);
      });
      return this;
    };

    ConsoleInterface.prototype.cli = function(next) {
      var program;
      this.welcome();
      program = this.program;
      program.mode = 'cli';
      return program.promptSingleLine('What would you like to do now?\n> ', function(input) {
        var args;
        args = input.split(/\s+/g);
        if (args.length) {
          if (args[0] === 'docpad') {
            args.shift();
          }
        }
        args.unshift(process.argv[0]);
        args.unshift(process.argv[1]);
        return program.parse(args);
      });
    };

    ConsoleInterface.prototype.exit = function() {
      return process.exit(0);
    };

    ConsoleInterface.prototype.generate = function(next) {
      this.welcome();
      return this.docpad.action('generate', next);
    };

    ConsoleInterface.prototype.help = function(next) {
      this.welcome();
      console.log(this.program.helpInformation());
      return typeof next === "function" ? next() : void 0;
    };

    ConsoleInterface.prototype.info = function(next) {
      this.welcome();
      console.log(require('util').inspect(this.docpad.config));
      return typeof next === "function" ? next() : void 0;
    };

    ConsoleInterface.prototype.install = function(next) {
      this.welcome();
      return this.docpad.action('install', next);
    };

    ConsoleInterface.prototype.render = function(next) {
      var details, docpad, program, renderDocument, stdin, timeout, useStdin;
      docpad = this.docpad;
      docpad.setLogLevel(5);
      program = this.program;
      if (program.args.length === 1) {
        return docpad.error("You must pass a filename to the render command");
      }
      details = {
        filename: program.args[0],
        content: ''
      };
      useStdin = true;
      renderDocument = function() {
        return docpad.action('render', details, function(err, document) {
          if (err) {
            throw err;
          }
          console.log(document.get('contentRendered'));
          return typeof next === "function" ? next() : void 0;
        });
      };
      timeout = setTimeout(function() {
        timeout = null;
        if (details.content.replace(/\s+/, '')) {
          return;
        }
        useStdin = false;
        stdin.pause();
        return renderDocument();
      }, 1000);
      stdin = process.stdin;
      stdin.resume();
      stdin.setEncoding('utf8');
      stdin.on('data', function(data) {
        return details.content += data.toString();
      });
      return process.stdin.on('end', function() {
        if (!useStdin) {
          return;
        }
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        return renderDocument();
      });
    };

    ConsoleInterface.prototype.run = function(next) {
      this.welcome();
      return this.docpad.action('all', {
        selectSkeletonCallback: this.selectSkeletonCallback
      }, next);
    };

    ConsoleInterface.prototype.server = function(next) {
      this.welcome();
      return this.docpad.action('server', next);
    };

    ConsoleInterface.prototype.clean = function(next) {
      this.welcome();
      return this.docpad.action('clean', next);
    };

    ConsoleInterface.prototype.skeleton = function(next) {
      this.welcome();
      return this.docpad.action('skeleton', {
        selectSkeletonCallback: this.selectSkeletonCallback
      }, next);
    };

    ConsoleInterface.prototype.watch = function(next) {
      this.welcome();
      return this.docpad.action('watch', next);
    };

    return ConsoleInterface;

  })();

  module.exports = ConsoleInterface;

}).call(this);
