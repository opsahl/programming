// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, FileModel, Model, balUtil, mime, pathUtil, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pathUtil = require('path');

  balUtil = require('bal-util');

  _ = require('underscore');

  mime = require('mime');

  _ref = require(__dirname + '/../base'), Backbone = _ref.Backbone, Model = _ref.Model;

  FileModel = (function(_super) {

    __extends(FileModel, _super);

    function FileModel() {
      return FileModel.__super__.constructor.apply(this, arguments);
    }

    FileModel.prototype.outDirPath = null;

    FileModel.prototype.type = 'file';

    FileModel.prototype.stat = null;

    FileModel.prototype.defaults = {
      id: null,
      basename: null,
      extension: null,
      extensions: null,
      filename: null,
      fullPath: null,
      fullDirPath: null,
      outPath: null,
      outDirPath: null,
      relativePath: null,
      relativeDirPath: null,
      relativeBase: null,
      contentType: null,
      data: null,
      encoding: null,
      content: null,
      title: null,
      date: null,
      slug: null,
      url: null,
      urls: null,
      ignored: false
    };

    FileModel.prototype.initialize = function(data, options) {
      var outDirPath, stat;
      outDirPath = options.outDirPath, stat = options.stat;
      if (outDirPath) {
        this.outDirPath = outDirPath;
      }
      if (stat) {
        this.setStat(stat);
      }
      this.set({
        extensions: [],
        urls: []
      });
      return FileModel.__super__.initialize.apply(this, arguments);
    };

    FileModel.prototype.getActionArgs = function(opts, next) {
      if (typeof opts === 'function' && (next != null) === false) {
        next = opts;
        opts = {};
      } else {
        opts || (opts = {});
      }
      next || (next = opts.next || null);
      return {
        next: next,
        opts: opts
      };
    };

    FileModel.prototype.setStat = function(stat) {
      this.stat = stat;
      this.set({
        ctime: new Date(stat.ctime),
        mtime: new Date(stat.mtime)
      });
      return this;
    };

    FileModel.prototype.getAttributes = function() {
      return this.toJSON();
    };

    FileModel.prototype.getMeta = function() {
      return this.meta;
    };

    FileModel.prototype.isText = function() {
      return this.get('encoding') !== 'binary';
    };

    FileModel.prototype.isBinary = function() {
      return this.get('encoding') === 'binary';
    };

    FileModel.prototype.load = function(opts, next) {
      var complete, data, file, filePath, fullPath, _ref1,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
      file = this;
      filePath = this.get('relativePath') || this.get('fullPath') || this.get('filename');
      fullPath = this.get('fullPath');
      data = this.get('data');
      file.log('debug', "Loading the file: " + filePath);
      complete = function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Loaded the file: " + filePath);
        return next();
      };
      balUtil.exists(fullPath, function(exists) {
        if (exists) {
          return _this.readFile(fullPath, complete);
        } else {
          return _this.parseData(data, function(err) {
            if (err) {
              return next(err);
            }
            return _this.normalize(function(err) {
              if (err) {
                return next(err);
              }
              return complete();
            });
          });
        }
      });
      return this;
    };

    FileModel.prototype.readFile = function(fullPath, next) {
      var file, tasks,
        _this = this;
      file = this;
      fullPath = this.get('fullPath');
      file.log('debug', "Reading the file: " + fullPath);
      tasks = new balUtil.Group(function(err) {
        if (err) {
          file.log('err', "Failed to read the file: " + fullPath);
          return next(err);
        } else {
          return _this.normalize(function(err) {
            if (err) {
              return next(err);
            }
            file.log('debug', "Read the file: " + fullPath);
            return next();
          });
        }
      });
      tasks.total = 2;
      if (file.stat) {
        tasks.complete();
      } else {
        balUtil.stat(fullPath, function(err, fileStat) {
          if (err) {
            return next(err);
          }
          file.stat = fileStat;
          return tasks.complete();
        });
      }
      balUtil.readFile(fullPath, function(err, data) {
        if (err) {
          return next(err);
        }
        return file.parseData(data, tasks.completer());
      });
      return this;
    };

    FileModel.prototype.getEncoding = function(buffer) {
      var charCode, contentStartBinary, contentStartUTF8, encoding, i, _i, _ref1;
      contentStartBinary = buffer.toString('binary', 0, 24);
      contentStartUTF8 = buffer.toString('utf8', 0, 24);
      encoding = 'utf8';
      for (i = _i = 0, _ref1 = contentStartUTF8.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        charCode = contentStartUTF8.charCodeAt(i);
        if (charCode === 65533 || charCode <= 8) {
          encoding = 'binary';
          break;
        }
      }
      return encoding;
    };

    FileModel.prototype.parseData = function(data, next) {
      var backup, content, encoding;
      backup = this.toJSON();
      this.clear();
      encoding = 'utf8';
      this.set({
        data: data,
        basename: backup.basename,
        extension: backup.extension,
        extensions: backup.extensions,
        filename: backup.filename,
        fullPath: backup.fullPath,
        outPath: backup.outPath,
        outDirPath: backup.outDirPath,
        relativePath: backup.relativePath,
        relativeBase: backup.relativeBase,
        contentType: backup.contentType,
        urls: []
      });
      if (data instanceof Buffer) {
        encoding = this.getEncoding(data);
        if (encoding === 'binary') {
          content = '';
        } else {
          content = data.toString(encoding);
        }
      } else if (typeof data === 'string') {
        content = data;
      } else {
        content = '';
      }
      content = content.replace(/\r\n?/gm, '\n').replace(/\t/g, '    ');
      this.set({
        content: content,
        encoding: encoding
      });
      next();
      return this;
    };

    FileModel.prototype.addUrl = function(url) {
      var existingUrl, found, newUrl, urls, _i, _j, _len, _len1;
      if (url instanceof Array) {
        for (_i = 0, _len = url.length; _i < _len; _i++) {
          newUrl = url[_i];
          this.addUrl(newUrl);
        }
      } else if (url) {
        found = false;
        urls = this.get('urls');
        for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {
          existingUrl = urls[_j];
          if (existingUrl === url) {
            found = true;
            break;
          }
        }
        if (!found) {
          urls.push(url);
        }
      }
      return this;
    };

    FileModel.prototype.removeUrl = function(userUrl) {
      var index, url, urls, _i, _len;
      urls = this.get('urls');
      for (index = _i = 0, _len = urls.length; _i < _len; index = ++_i) {
        url = urls[index];
        if (url === userUrl) {
          urls.remove(index);
          break;
        }
      }
      return this;
    };

    FileModel.prototype.normalize = function(opts, next) {
      var basename, contentType, date, extension, extensions, filename, fullDirPath, fullPath, id, relativeBase, relativeDirPath, relativePath, _ref1;
      if (opts == null) {
        opts = {};
      }
      _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
      basename = this.get('basename');
      filename = this.get('filename');
      fullPath = this.get('fullPath');
      relativePath = this.get('relativePath');
      id = this.get('id');
      date = this.get('date');
      fullPath || (fullPath = filename);
      relativePath || (relativePath = null);
      filename = pathUtil.basename(fullPath);
      basename = filename.replace(/\..*/, '');
      extensions = filename.split(/\./g);
      extensions.shift();
      extension = extensions.length ? extensions[extensions.length - 1] : null;
      fullDirPath = pathUtil.dirname(fullPath) || '';
      relativeDirPath = pathUtil.dirname(relativePath).replace(/^\.$/, '') || '';
      relativeBase = relativeDirPath.length ? pathUtil.join(relativeDirPath, basename) : basename;
      id || (id = relativePath || fullPath);
      if (this.stat) {
        date || (date = new Date(this.stat.mtime));
      }
      contentType = mime.lookup(fullPath);
      this.set({
        basename: basename,
        filename: filename,
        fullPath: fullPath,
        relativePath: relativePath,
        fullDirPath: fullDirPath,
        relativeDirPath: relativeDirPath,
        id: id,
        relativeBase: relativeBase,
        extensions: extensions,
        extension: extension,
        contentType: contentType,
        date: date
      });
      next();
      return this;
    };

    FileModel.prototype.contextualize = function(opts, next) {
      var extensions, filename, name, outDirPath, outPath, relativeBase, slug, url, _ref1;
      if (opts == null) {
        opts = {};
      }
      _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
      relativeBase = this.get('relativeBase');
      extensions = this.get('extensions');
      filename = this.get('filename');
      url = null;
      slug = null;
      name = null;
      outPath = null;
      url || (url = extensions.length ? "/" + relativeBase + "." + (extensions.join('.')) : "/" + relativeBase);
      slug || (slug = balUtil.generateSlugSync(relativeBase));
      name || (name = filename);
      outPath = this.outDirPath ? pathUtil.join(this.outDirPath, url) : null;
      outDirPath = pathUtil.dirname(outPath);
      this.addUrl(url);
      this.set({
        url: url,
        slug: slug,
        name: name,
        outPath: outPath,
        outDirPath: outDirPath
      });
      next();
      return this;
    };

    FileModel.prototype.write = function(next) {
      var contentOrData, file, fileOutPath;
      file = this;
      fileOutPath = this.get('outPath');
      contentOrData = this.get('content') || this.get('data');
      file.log('debug', "Writing the file: " + fileOutPath);
      balUtil.writeFile(fileOutPath, contentOrData, function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Wrote the file: " + fileOutPath);
        return next();
      });
      return this;
    };

    return FileModel;

  })(Model);

  module.exports = FileModel;

}).call(this);
