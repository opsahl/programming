// Generated by CoffeeScript 1.3.3
(function() {
  var Base, CSON, DocPad, EventSystem, airbrake, balUtil, caterpillar, growl, pathUtil, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  pathUtil = require('path');

  _ = require('underscore');

  caterpillar = require('caterpillar');

  CSON = require('cson');

  balUtil = require('bal-util');

  EventSystem = balUtil.EventSystem;

  airbrake = null;

  growl = null;

  Base = require(__dirname + '/base');

  require(__dirname + '/prototypes');

  /*
  The DocPad Class
  It extends the EventSystem from bal-util to provide system events
  It allows us to support multiple instances of docpad at the same time
  */


  DocPad = (function(_super) {

    __extends(DocPad, _super);

    DocPad.prototype.PluginLoader = require(__dirname + '/plugin-loader');

    DocPad.prototype.BasePlugin = require(__dirname + '/plugin');

    DocPad.prototype.Base = Base;

    DocPad.prototype.FileModel = require(__dirname + '/models/file');

    DocPad.prototype.DocumentModel = require(__dirname + '/models/document');

    DocPad.prototype.QueryCollection = Base.QueryCollection;

    DocPad.prototype.FilesCollection = require(__dirname + '/collections/files');

    DocPad.prototype.ElementsCollection = require(__dirname + '/collections/elements');

    DocPad.prototype.MetaCollection = require(__dirname + '/collections/meta');

    DocPad.prototype.ScriptsCollection = require(__dirname + '/collections/scripts');

    DocPad.prototype.StylesCollection = require(__dirname + '/collections/styles');

    DocPad.prototype.version = null;

    DocPad.prototype.getVersion = function() {
      return this.version;
    };

    DocPad.prototype.serverInstance = null;

    DocPad.prototype.getServer = function() {
      return this.serverInstance;
    };

    DocPad.prototype.setServer = function(value) {
      this.serverInstance = value;
      return this;
    };

    DocPad.prototype.loggerInstance = null;

    DocPad.prototype.getLogger = function() {
      return this.loggerInstance;
    };

    DocPad.prototype.setLogger = function(value) {
      this.loggerInstance = value;
      return this;
    };

    DocPad.prototype.database = null;

    DocPad.prototype.getDatabase = function() {
      return this.database;
    };

    DocPad.prototype.blocks = null;

    /* {
    		# A collection of meta elements
    		meta: null  # Elements Collection
    
    		# A collection of script elements
    		scripts: null  # Scripts Collection
    
    		# Collection of style elements
    		styles: null  # Styles Collection
    	}
    */


    DocPad.prototype.getBlock = function(name, clone) {
      var block, classname;
      block = this.blocks[name];
      if (clone) {
        classname = name[0].toUpperCase() + name.slice(1) + 'Collection';
        block = new this[classname](block.models);
      }
      return block;
    };

    DocPad.prototype.setBlock = function(name, value) {
      this.blocks[name] = value;
      return this;
    };

    DocPad.prototype.collections = null;

    /* {
    		# Documents collection
    		documents: null  # QueryEngine Collection
    
    		# Files collection
    		files: null  # QueryEngine Collection
    
    		# Layouts collection
    		layouts: null  # QueryEngine Collection
    	}
    */


    DocPad.prototype.getCollection = function(name) {
      return this.collections[name];
    };

    DocPad.prototype.setCollection = function(name, value) {
      this.collections[name] = value;
      return this;
    };

    DocPad.prototype.slowPlugins = null;

    DocPad.prototype.foundPlugins = null;

    DocPad.prototype.loadedPlugins = null;

    DocPad.prototype.exchange = null;

    DocPad.prototype.corePath = pathUtil.join(__dirname, '..', '..');

    DocPad.prototype.libPath = __dirname;

    DocPad.prototype.mainPath = pathUtil.join(__dirname, 'docpad');

    DocPad.prototype.packagePath = pathUtil.join(__dirname, '..', '..', 'package.json');

    DocPad.prototype.npmPath = pathUtil.join(__dirname, '..', '..', 'node_modules', 'npm', 'bin', 'npm-cli.js');

    /*
    	Instance Configuration
    	Loaded from:
    		- the passed instanceConfiguration when creating a new DocPad instance
    		- the detected websiteConfiguration inside ./docpad.cson>docpad
    		- the following configuration
    */


    DocPad.prototype.config = {
      force: false,
      enableUnlistedPlugins: true,
      enabledPlugins: null,
      skipUnsupportedPlugins: true,
      plugins: null,
      exchangeUrl: 'https://raw.github.com/bevry/docpad-extras/docpad-6.x/exchange.json',
      rootPath: '.',
      packagePath: 'package.json',
      configPath: 'docpad.cson',
      outPath: 'out',
      srcPath: 'src',
      documentsPaths: [pathUtil.join('src', 'documents')],
      filesPaths: [pathUtil.join('src', 'files'), pathUtil.join('src', 'public')],
      layoutsPaths: [pathUtil.join('src', 'layouts')],
      pluginPaths: [],
      pluginsPaths: ['node_modules', 'plugins'],
      server: null,
      extendServer: true,
      port: 9778,
      maxAge: false,
      logLevel: ((__indexOf.call(process.argv, '-d') >= 0) ? 7 : 6),
      logger: null,
      growl: true,
      catchExceptions: true,
      nodePath: /node$/.test(process.execPath) ? process.execPath : 'node',
      gitPath: /^win/.test(process.platform) ? 'git.cmd' : 'git',
      templateData: null,
      reportErrors: true,
      checkVersion: true,
      collections: null
    };

    function DocPad(config, next) {
      var docpad, logger,
        _this = this;
      if (config == null) {
        config = {};
      }
      this.notify = __bind(this.notify, this);

      docpad = this;
      _.bindAll(this, 'createDocument', 'createFile');
      this.setMaxListeners(0);
      logger = new caterpillar.Logger({
        transports: {
          formatter: {
            module: module
          }
        }
      });
      this.setLogger(logger);
      this.setLogLevel(6);
      this.on('log', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.log.apply(this, args);
      });
      this.slowPlugins = {};
      this.foundPlugins = {};
      this.loadedPlugins = {};
      this.exchange = {};
      this.collections = {};
      this.blocks = {};
      this.config = _.clone(this.config);
      this.config.enabledPlugins = {};
      this.config.plugins = {};
      this.config.templateData = {};
      this.config.collections = {};
      this.config.documentsPaths = this.config.documentsPaths.slice();
      this.config.filesPaths = this.config.filesPaths.slice();
      this.config.layoutsPaths = this.config.layoutsPaths.slice();
      this.config.pluginPaths = this.config.pluginPaths.slice();
      this.config.pluginsPaths = this.config.pluginsPaths.slice();
      this.database = new this.FilesCollection();
      this.loadConfiguration(config, {}, function(err) {
        var documents, files, layouts, meta, scripts, styles;
        if (err) {
          return _this.error(err);
        }
        if (_this.config.catchExceptions) {
          process.setMaxListeners(0);
          process.on('uncaughtException', function(err) {
            return docpad.error(err);
          });
        }
        documents = _this.database.createLiveChildCollection().setQuery('isDocument', {
          $or: {
            isDocument: true,
            fullPath: {
              $startsWith: _this.config.documentsPaths
            }
          }
        }).on('add', function(model) {
          docpad.log('debug', "Adding document: " + model.attributes.fullPath);
          return _.defaults(model.attributes, {
            isDocument: true,
            render: true,
            write: true
          });
        });
        files = _this.database.createLiveChildCollection().setQuery('isFile', {
          $or: {
            isFile: true,
            fullPath: {
              $startsWith: _this.config.filesPaths
            }
          }
        }).on('add', function(model) {
          docpad.log('debug', "Adding file: " + model.attributes.fullPath);
          return _.defaults(model.attributes, {
            isFile: true,
            render: false,
            write: true
          });
        });
        layouts = _this.database.createLiveChildCollection().setQuery('isLayout', {
          $or: {
            isLayout: true,
            fullPath: {
              $startsWith: _this.config.layoutsPaths
            }
          }
        }).on('add', function(model) {
          docpad.log('debug', "Adding layout: " + model.attributes.fullPath);
          return _.defaults(model.attributes, {
            isLayout: true,
            render: false,
            write: false
          });
        });
        _this.setCollection('documents', documents);
        _this.setCollection('files', files);
        _this.setCollection('layouts', layouts);
        meta = new _this.MetaCollection().add(['<meta http-equiv="X-Powered-By" content="DocPad"/>']);
        scripts = new _this.MetaCollection();
        styles = new _this.MetaCollection();
        _this.setBlock('meta', meta);
        _this.setBlock('scripts', scripts);
        _this.setBlock('styles', styles);
        if (_this.config.reportErrors && /win/.test(process.platform) === false) {
          try {
            airbrake = require('airbrake').createClient('e7374dd1c5a346efe3895b9b0c1c0325');
          } catch (err) {
            airbrake = false;
          }
        }
        _this.compareVersion();
        _this.log('debug', 'DocPad loaded succesfully');
        _this.log('debug', 'Loaded the following plugins:', _.keys(_this.loadedPlugins).sort().join(', '));
        return typeof next === "function" ? next() : void 0;
      });
    }

    DocPad.prototype.cleanResources = function() {
      this.getDatabase().reset([]);
      this.getBlock('meta').reset([]);
      this.getBlock('scripts').reset([]);
      this.getBlock('styles').reset([]);
      return this;
    };

    DocPad.prototype.loadConfigUrl = function(configUrl, next) {
      this.log('debug', "Loading configuration url: " + configUrl);
      balUtil.readPath(configUrl, function(err, data) {
        if (err) {
          return next(err);
        }
        return CSON.parse(data.toString(), next);
      });
      return this;
    };

    DocPad.prototype.loadConfigPath = function(configPath, next) {
      this.log('debug', "Loading configuration path: " + configPath);
      balUtil.exists(configPath, function(exists) {
        if (!exists) {
          return next(null, null);
        }
        return CSON.parseFile(configPath, next);
      });
      return this;
    };

    DocPad.prototype.loadCollections = function(next) {
      var database, docpad, tasks, _base,
        _this = this;
      docpad = this;
      database = this.getDatabase();
      (_base = this.config).collections || (_base.collections = {});
      tasks = new balUtil.Group(function(err) {
        if (err) {
          docpad.error(err);
        }
        return next();
      });
      _.each(this.config.collections, function(fn, name) {
        return tasks.push(function(complete) {
          var collection;
          if (fn.length === 2) {
            return fn(database, function(err, collection) {
              if (err) {
                docpad.error(err);
              }
              if (collection) {
                collection.live(true);
                docpad.setCollection(name, collection);
              }
              return complete();
            });
          } else {
            collection = fn(database);
            if (collection) {
              collection.live(true);
              docpad.setCollection(name, collection);
            }
            return complete();
          }
        });
      });
      tasks.async();
      return this;
    };

    DocPad.prototype.loadConfiguration = function(instanceConfig, options, next) {
      var complete, docpad, startLoading, _ref,
        _this = this;
      if (instanceConfig == null) {
        instanceConfig = {};
      }
      if (options == null) {
        options = {};
      }
      docpad = this;
      if ((_ref = options.blocking) == null) {
        options.blocking = true;
      }
      complete = function(err) {
        var nextStep;
        nextStep = function() {
          return docpad.finish('loading', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            return next(err);
          });
        };
        if (options.blocking) {
          return docpad.unblock('generating, watching, serving', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            return nextStep();
          });
        } else {
          return nextStep();
        }
      };
      startLoading = function() {
        return docpad.start('loading', function(lockError) {
          var docpadPackagePath, tasks, websiteConfig, websiteConfigPath, websitePackageConfig, websitePackagePath;
          if (lockError) {
            return docpad.fatal(lockError);
          }
          instanceConfig.rootPath || (instanceConfig.rootPath = process.cwd());
          instanceConfig.packagePath || (instanceConfig.packagePath = _this.config.packagePath);
          instanceConfig.configPath || (instanceConfig.configPath = _this.config.configPath);
          docpadPackagePath = _this.packagePath;
          websitePackagePath = pathUtil.resolve(instanceConfig.rootPath, instanceConfig.packagePath);
          websiteConfigPath = pathUtil.resolve(instanceConfig.rootPath, instanceConfig.configPath);
          websitePackageConfig = {};
          websiteConfig = {};
          tasks = new balUtil.Group(function(err) {
            var config, key, postTasks, type, typePath, typePaths, _i, _j, _len, _len1, _ref1;
            if (err) {
              return complete(err);
            }
            config = _.extend({}, _this.config, websitePackageConfig, websiteConfig, instanceConfig);
            config.enabledPlugins = _.extend({}, _this.config.enabledPlugins || {}, websiteConfig.enabledPlugins || {}, instanceConfig.enabledPlugins || {});
            config.templateData = _.extend({}, _this.config.templateData || {}, websiteConfig.templateData || {}, instanceConfig.templateData || {});
            _this.config = config;
            if (_this.config.server) {
              _this.server = _this.config.server;
            }
            _this.config.rootPath = pathUtil.normalize(_this.config.rootPath || process.cwd());
            _this.config.outPath = pathUtil.resolve(_this.config.rootPath, _this.config.outPath);
            _this.config.srcPath = pathUtil.resolve(_this.config.rootPath, _this.config.srcPath);
            _ref1 = ['documents', 'files', 'layouts', 'plugins'];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              type = _ref1[_i];
              typePaths = _this.config[type + 'Paths'];
              for (key = _j = 0, _len1 = typePaths.length; _j < _len1; key = ++_j) {
                typePath = typePaths[key];
                typePaths[key] = pathUtil.resolve(_this.config.rootPath, typePath);
              }
            }
            if (_this.config.logger) {
              _this.setLogger(_this.config.logger);
            }
            _this.setLogLevel(_this.config.logLevel);
            postTasks = new balUtil.Group(function(err) {
              return complete(err);
            });
            postTasks.total = 2;
            _this.loadCollections(postTasks.completer());
            return _this.loadPlugins(postTasks.completer());
          });
          tasks.total = 3;
          _this.loadConfigPath(docpadPackagePath, function(err, data) {
            if (err) {
              return tasks.complete(err);
            }
            data || (data = {});
            docpad.version = data.version;
            if (airbrake) {
              airbrake.appVersion = docpad.version;
            }
            return tasks.complete();
          });
          _this.loadConfigPath(websitePackagePath, function(err, data) {
            if (err) {
              return tasks.complete(err);
            }
            data || (data = {});
            websitePackageConfig = data.docpad || {};
            return tasks.complete();
          });
          return _this.loadConfigPath(websiteConfigPath, function(err, data) {
            if (err) {
              return tasks.complete(err);
            }
            data || (data = {});
            websiteConfig = data;
            return tasks.complete();
          });
        });
      };
      if (options.blocking) {
        docpad.block('generating, watching, serving', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return startLoading();
        });
      } else {
        startLoading();
      }
      return this;
    };

    DocPad.prototype.initNodeModules = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts.npmPath = this.npmPath;
      opts.nodePath = this.config.nodePath;
      opts.force = this.config.force;
      balUtil.initNodeModules(opts);
      return this;
    };

    DocPad.prototype.setLogLevel = function(level) {
      this.getLogger().setLevel(level);
      return this;
    };

    DocPad.prototype.getLogLevel = function() {
      return this.config.logLevel;
    };

    DocPad.prototype.getDebugging = function() {
      return this.getLogLevel() === 7;
    };

    DocPad.prototype.fatal = function(err) {
      var docpad;
      docpad = this;
      if (!err) {
        return this;
      }
      this.error(err, 'err', function() {
        if (docpad.config.catchExceptions) {
          return process.exit(-1);
        } else {
          throw err;
        }
      });
      return this;
    };

    DocPad.prototype.log = function() {
      var args, logger;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      logger = this.getLogger();
      logger.log.apply(logger, args);
      return this;
    };

    DocPad.prototype.error = function(err, type, next) {
      var docpad;
      if (type == null) {
        type = 'err';
      }
      docpad = this;
      if (!err || err.logged) {
        if (typeof next === "function") {
          next();
        }
        return this;
      }
      err.logged = true;
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      err.logged = true;
      docpad.log(type, 'An error occured:', err.message, err.stack);
      if (docpad.config.reportErrors && airbrake) {
        err.params = {
          docpadVersion: this.version,
          docpadConfig: this.config
        };
        airbrake.notify(err, function(airbrakeErr, airbrakeUrl) {
          if (airbrakeErr) {
            console.log(airbrakeErr);
          }
          console.log('Error has been logged to:', airbrakeUrl);
          return typeof next === "function" ? next() : void 0;
        });
      } else {
        if (typeof next === "function") {
          next();
        }
      }
      return this;
    };

    DocPad.prototype.warn = function(message, err, next) {
      var docpad;
      docpad = this;
      docpad.log('warn', message);
      docpad.error(err, 'warn', next);
      return this;
    };

    DocPad.prototype.notify = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.config.growl) {
        return this;
      }
      try {
        if (growl == null) {
          growl = require('growl');
        }
        if (growl) {
          growl.apply(growl, args);
        }
      } catch (err) {

      }
      return this;
    };

    DocPad.prototype.createFile = function(data, options) {
      var docpad, file;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      docpad = this;
      options = _.extend({
        outDirPath: this.config.outPath
      }, options);
      file = new this.FileModel(data, options);
      file.on('log', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.log.apply(docpad, args);
      });
      file.on('render', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.emitSync.apply(docpad, ['render'].concat(__slice.call(args)));
      });
      return file;
    };

    DocPad.prototype.createDocument = function(data, options) {
      var docpad, document;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      docpad = this;
      options = _.extend({
        outDirPath: this.config.outPath
      }, options);
      document = new this.DocumentModel(data, options);
      document.on('log', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.log.apply(docpad, args);
      });
      document.on('getLayout', function(opts, next) {
        var layout, layoutId, layouts;
        layoutId = opts.layoutId;
        layouts = docpad.getCollection('layouts');
        layout = layouts.findOne({
          id: layoutId
        });
        if (!layout) {
          layout = layouts.findOne({
            relativeBase: layoutId
          });
        }
        return next(null, {
          layout: layout
        });
      });
      document.on('render', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.emitSync.apply(docpad, ['render'].concat(__slice.call(args)));
      });
      document.on('renderDocument', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return docpad.emitSync.apply(docpad, ['renderDocument'].concat(__slice.call(args)));
      });
      return document;
    };

    DocPad.prototype.ensureFile = function(data, options) {
      var database, result;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      database = this.getDatabase();
      result = database.findOne({
        fullPath: data.fullPath
      });
      if (!result) {
        result = this.createFile(data, options);
        database.add(result);
      }
      return result;
    };

    DocPad.prototype.ensureDocument = function(data, options) {
      var database, result;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      database = this.getDatabase();
      result = database.findOne({
        fullPath: data.fullPath
      });
      if (!result) {
        result = this.createDocument(data, options);
        database.add(result);
      }
      return result;
    };

    DocPad.prototype.ensureFileOrDocument = function(data, options) {
      var database, dirPath, docpad, fileFullPath, result, _i, _j, _len, _len1, _ref, _ref1;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      docpad = this;
      database = this.getDatabase();
      fileFullPath = data.fullPath;
      result = database.findOne({
        fullPath: fileFullPath
      });
      if (!result) {
        _ref = docpad.config.documentsPaths.concat(docpad.config.layoutsPaths);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dirPath = _ref[_i];
          if (fileFullPath.indexOf(dirPath) === 0) {
            data.relativePath || (data.relativePath = fileFullPath.replace(dirPath, '').replace(/^[\/\\]/, ''));
            result = this.createDocument(data, options);
            break;
          }
        }
        if (!result) {
          _ref1 = docpad.config.filePaths;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            dirPath = _ref1[_j];
            if (fileFullPath.indexOf(dirPath) === 0) {
              data.relativePath || (data.relativePath = fileFullPath.replace(dirPath, '').replace(/^[\/\\]/, ''));
              result = this.createFile(data, options);
              break;
            }
          }
        }
        if (!result) {
          result = this.createFile(data, options);
        }
        database.add(result);
      }
      return result;
    };

    DocPad.prototype.parseDirectory = function(opts, next) {
      var createFunction, filesToLoad, me, path;
      if (opts == null) {
        opts = {};
      }
      me = this;
      path = opts.path, createFunction = opts.createFunction;
      filesToLoad = new this.FilesCollection();
      if (!balUtil.existsSync(path)) {
        me.log('debug', "Skipped directory: " + path + " (it does not exist)");
        return next();
      }
      me.log('debug', "Parsing directory: " + path);
      balUtil.scandir({
        path: path,
        ignorePatterns: true,
        fileAction: function(fileFullPath, fileRelativePath, nextFile, fileStat) {
          var data, file, options;
          data = {
            fullPath: fileFullPath,
            relativePath: fileRelativePath
          };
          options = {
            stat: fileStat
          };
          file = createFunction(data, options);
          filesToLoad.add(file);
          return nextFile();
        },
        next: function(err) {
          if (err) {
            return next(err);
          }
          me.log('debug', "Parsed directory: " + path);
          return me.loadFiles({
            collection: filesToLoad
          }, function(err) {
            return next(err);
          });
        }
      });
      return this;
    };

    DocPad.prototype.getPlugin = function(pluginName) {
      return this.loadedPlugins[pluginName];
    };

    DocPad.prototype.hasPlugins = function() {
      return _.isEmpty(this.loadedPlugins) === false;
    };

    DocPad.prototype.loadPlugins = function(next) {
      var docpad, snore, tasks,
        _this = this;
      docpad = this;
      this.slowPlugins = {};
      snore = this.createSnore(function() {
        return docpad.log('notice', "We're preparing your plugins, this may take a while the first time. Waiting on the plugins: " + (_.keys(docpad.slowPlugins).join(', ')));
      });
      tasks = new balUtil.Group(function(err) {
        docpad.slowPlugins = {};
        snore.clear();
        return next(err);
      });
      _.each(this.config.pluginsPaths || [], function(pluginsPath) {
        var exists;
        exists = balUtil.existsSync(pluginsPath);
        if (exists) {
          return tasks.push(function(complete) {
            return _this.loadPluginsIn(pluginsPath, complete);
          });
        }
      });
      _.each(this.config.pluginPaths || [], function(pluginPath) {
        var exists;
        exists = balUtil.existsSync(pluginPath);
        if (exists) {
          return tasks.push(function(complete) {
            return _this.loadPlugin(pluginPath, complete);
          });
        }
      });
      tasks.async();
      return this;
    };

    DocPad.prototype.loadedPlugin = function(pluginName, next) {
      var docpad;
      docpad = this;
      docpad.onceFinished('loading', function(err) {
        var loaded;
        if (err) {
          return next(err);
        }
        loaded = docpad.loadedPlugins[pluginName] != null;
        return next(null, loaded);
      });
      return this;
    };

    DocPad.prototype.loadPlugin = function(fileFullPath, _next) {
      var config, docpad, enabled, loader, next, pluginName;
      docpad = this;
      config = this.config;
      next = function(err) {
        delete docpad.slowPlugins[pluginName];
        return _next(err);
      };
      loader = new this.PluginLoader({
        dirPath: fileFullPath,
        docpad: this,
        BasePlugin: this.BasePlugin
      });
      pluginName = loader.pluginName;
      enabled = (config.enableUnlistedPlugins && (config.enabledPlugins[pluginName] != null) === false) || config.enabledPlugins[pluginName] === true;
      if (docpad.foundPlugins[pluginName] != null) {
        return _next();
      }
      docpad.slowPlugins[pluginName] = true;
      docpad.foundPlugins[pluginName] = true;
      if (!enabled) {
        docpad.log('debug', "Skipped plugin: " + pluginName);
        return next();
      } else {
        docpad.log('debug', "Loading plugin: " + pluginName);
        loader.exists(function(err, exists) {
          if (err || !exists) {
            return next(err);
          }
          return loader.unsupported(function(err, unsupported) {
            if (err) {
              return next(err);
            }
            if (unsupported) {
              if (unsupported === 'version' && docpad.config.skipUnsupportedPlugins === false) {
                docpad.log('warn', "Continuing with the unsupported plugin: " + pluginName);
              } else {
                if (unsupported === 'type') {
                  docpad.log('debug', "Skipped the unsupported plugin: " + pluginName + " due to " + unsupported);
                } else {
                  docpad.log('warn', "Skipped the unsupported plugin: " + pluginName + " due to " + unsupported);
                }
                return next();
              }
            }
            return loader.install(function(err) {
              if (err) {
                return next(err);
              }
              return loader.load(function(err) {
                if (err) {
                  return next(err);
                }
                return loader.create({}, function(err, pluginInstance) {
                  if (err) {
                    return next(err);
                  }
                  docpad.loadedPlugins[loader.pluginName] = pluginInstance;
                  docpad.log('debug', "Loaded plugin: " + pluginName);
                  return next();
                });
              });
            });
          });
        });
      }
      return this;
    };

    DocPad.prototype.loadPluginsIn = function(pluginsPath, next) {
      var docpad;
      docpad = this;
      docpad.log('debug', "Plugins loading for: " + pluginsPath);
      balUtil.scandir({
        path: pluginsPath,
        ignorePatterns: true,
        fileAction: false,
        dirAction: function(fileFullPath, fileRelativePath, _nextFile) {
          var nextFile, pluginName;
          pluginName = pathUtil.basename(fileFullPath);
          if (fileFullPath === pluginsPath) {
            return _nextFile(null, false);
          }
          nextFile = function(err, skip) {
            if (err) {
              docpad.warn("Failed to load the plugin: " + pluginName + " at " + fileFullPath + ". The error follows:", err);
            }
            return _nextFile(null, skip);
          };
          return docpad.loadPlugin(fileFullPath, function(err) {
            return nextFile(err, true);
          });
        },
        next: function(err) {
          docpad.log('debug', "Plugins loaded for: " + pluginsPath);
          return next(err);
        }
      });
      return this;
    };

    DocPad.prototype.createSnore = function(message) {
      var docpad, snore;
      docpad = this;
      snore = {
        snoring: false,
        timer: setTimeout(function() {
          snore.clear();
          snore.snoring = true;
          if (_.isFunction(message)) {
            return message();
          } else {
            return docpad.log('notice', message);
          }
        }, 5000),
        clear: function() {
          if (snore.timer) {
            clearTimeout(snore.timer);
            return snore.timer = false;
          }
        }
      };
      return snore;
    };

    DocPad.prototype.compareVersion = function() {
      var docpad, notify;
      if (!this.config.checkVersion) {
        return this;
      }
      docpad = this;
      notify = this.notify;
      balUtil.packageCompare({
        local: pathUtil.join(docpad.corePath, 'package.json'),
        remote: 'https://raw.github.com/bevry/docpad/master/package.json',
        newVersionCallback: function(details) {
          docpad.notify("There is a new version of " + details.local.name + " available");
          return docpad.log('notice', "There is a new version of " + details.local.name + " available, you should probably upgrade...\ncurrent version:  " + details.local.version + "\nnew version:      " + details.remote.version + "\ngrab it here:     " + details.remote.homepage);
        }
      });
      return this;
    };

    DocPad.prototype.getTemplateData = function(userData) {
      var docpad, templateData, _base, _base1;
      userData || (userData = {});
      docpad = this;
      templateData = _.extend({
        site: {},
        include: function(subRelativePath) {
          var fullRelativePath, result, warn;
          this.documentModel.set({
            referencesOthers: true
          });
          fullRelativePath = this.document.relativeDirPath + '/' + subRelativePath;
          result = docpad.getDatabase().findOne({
            relativePath: fullRelativePath
          });
          if (result) {
            return result.get('contentRendered') || result.get('content');
          } else {
            warn = "The file " + subRelativePath + " was not found...";
            docpad.warn(warn);
            return warn;
          }
        },
        getDatabase: function() {
          this.documentModel.set({
            referencesOthers: true
          });
          return docpad.getDatabase();
        },
        getCollection: function(name) {
          this.documentModel.set({
            referencesOthers: true
          });
          return docpad.getCollection(name);
        },
        getBlock: function(name) {
          return docpad.getBlock(name, true);
        }
      }, this.config.templateData, userData);
      (_base = templateData.site).date || (_base.date = new Date());
      (_base1 = templateData.site).keywords || (_base1.keywords = []);
      if (_.isString(templateData.site.keywords)) {
        templateData.site.keywords = templateData.site.keywords.split(/,\s*/g);
      }
      return templateData;
    };

    DocPad.prototype.prepareAndRender = function(document, templateData, next) {
      var docpad;
      docpad = this;
      balUtil.flow({
        object: document,
        action: 'normalize load contextualize render',
        args: [
          {
            templateData: templateData
          }
        ],
        next: function(err) {
          return next(err);
        }
      });
      return this;
    };

    DocPad.prototype.getExchange = function(next) {
      if (!_.isEmpty(this.exchange)) {
        return next(null, this.exchange);
      }
      this.loadConfigUrl(this.config.exchangeUrl, function(err, parsedData) {
        if (err) {
          return next(err);
        }
        this.exchange = parsedData;
        return next(null, parsedData);
      });
      return this;
    };

    DocPad.prototype.getSkeletons = function(next) {
      this.getExchange(function(err, exchange) {
        var skeletons;
        if (err) {
          return next(err);
        }
        skeletons = exchange.skeletons;
        return next(null, skeletons);
      });
      return this;
    };

    DocPad.prototype.getSkeleton = function(skeletonId, next) {
      this.getSkeletons(function(err, skeletons) {
        var skeletonDetails;
        if (err) {
          return next(err);
        }
        skeletonDetails = skeletons[skeletonId];
        return next(null, skeletonDetails);
      });
      return this;
    };

    DocPad.prototype.installSkeleton = function(skeletonId, destinationPath, next) {
      var docpad, packagePath;
      docpad = this;
      packagePath = pathUtil.join(destinationPath, 'package.json');
      this.getSkeleton(skeletonId, function(err, skeletonDetails) {
        var repoConfig;
        if (err) {
          return docpad.error(err);
        }
        repoConfig = {
          gitPath: docpad.config.gitPath,
          path: destinationPath,
          url: skeletonDetails.repo,
          branch: skeletonDetails.branch,
          remote: 'skeleton',
          output: docpad.getDebugging(),
          next: function(err) {
            var _this = this;
            if (err) {
              return docpad.error(err);
            }
            return docpad.initNodeModules({
              path: destinationPath,
              next: function(err) {
                if (err) {
                  return docpad.error(err);
                }
                return next();
              }
            });
          }
        };
        return balUtil.ensurePath(destinationPath, function(err) {
          if (err) {
            return docpad.error(err);
          }
          return balUtil.initGitRepo(repoConfig);
        });
      });
      return this;
    };

    DocPad.prototype.loadFiles = function(opts, next) {
      var collection, database, docpad, tasks;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      database = this.getDatabase();
      collection = opts.collection;
      docpad.log('debug', "Loading " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (err) {
          return next(err);
        }
        return docpad.emitSync('loadAfter', {
          collection: collection
        }, function(err) {
          docpad.log('debug', "Loaded " + collection.length + " files");
          return next();
        });
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          var fileRelativePath;
          fileRelativePath = file.get('relativePath');
          docpad.log('debug', "Loading file: " + fileRelativePath);
          return file.load(function(err) {
            var fileIgnored, fileParse;
            if (err) {
              docpad.warn("Failed to load the file: " + fileRelativePath + ". The error follows:", err);
              return complete();
            }
            fileIgnored = file.get('ignored');
            fileParse = file.get('parse');
            if (fileIgnored || ((fileParse != null) && !fileParse)) {
              docpad.log('info', "Skipped manually ignored file: " + fileRelativePath);
              collection.remove(file);
              return complete();
            } else {
              docpad.log('debug', "Loaded file: " + fileRelativePath);
            }
            database.add(file);
            return complete();
          });
        });
      });
      if (tasks.total) {
        docpad.emitSync('loadBefore', {
          collection: collection
        }, function(err) {
          if (err) {
            return next(err);
          }
          return tasks.async();
        });
      } else {
        tasks.exit();
      }
      return this;
    };

    DocPad.prototype.contextualizeFiles = function(opts, next) {
      var collection, docpad, tasks, templateData;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      collection = opts.collection, templateData = opts.templateData;
      docpad.log('debug', "Contextualizing " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (err) {
          return next(err);
        }
        return docpad.emitSync('contextualizeAfter', {
          collection: collection
        }, function(err) {
          docpad.log('debug', "Contextualized " + collection.length + " files");
          return next();
        });
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          return file.contextualize(complete);
        });
      });
      if (tasks.total) {
        docpad.emitSync('contextualizeBefore', {
          collection: collection,
          templateData: templateData
        }, function(err) {
          if (err) {
            return next(err);
          }
          return tasks.async();
        });
      } else {
        tasks.exit();
      }
      return this;
    };

    DocPad.prototype.renderFiles = function(opts, next) {
      var collection, docpad, tasks, templateData,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      collection = opts.collection, templateData = opts.templateData;
      docpad.log('debug', "Rendering " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (err) {
          return next(err);
        }
        return docpad.emitSync('renderAfter', {
          collection: collection
        }, function(err) {
          if (!err) {
            docpad.log('debug', "Rendered " + collection.length + " files");
          }
          return next(err);
        });
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          var dynamic, relativePath, render;
          dynamic = file.get('dynamic');
          render = file.get('render');
          relativePath = file.get('relativePath');
          if (dynamic || ((render != null) && !render) || !relativePath) {
            return complete();
          } else if (file.render != null) {
            return file.render({
              templateData: templateData
            }, complete);
          } else {
            return complete();
          }
        });
      });
      if (tasks.total) {
        docpad.emitSync('renderBefore', {
          collection: collection,
          templateData: templateData
        }, function(err) {
          if (err) {
            return next(err);
          }
          return tasks.async();
        });
      } else {
        tasks.exit();
      }
      return this;
    };

    DocPad.prototype.writeFiles = function(opts, next) {
      var collection, docpad, tasks, templateData,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      collection = opts.collection, templateData = opts.templateData;
      docpad.log('debug', "Writing " + collection.length + " files");
      tasks = new balUtil.Group(function(err) {
        if (err) {
          return next(err);
        }
        return docpad.emitSync('writeAfter', {
          collection: collection
        }, function(err) {
          if (!err) {
            docpad.log('debug', "Wrote " + collection.length + " files");
          }
          return next(err);
        });
      });
      collection.forEach(function(file) {
        return tasks.push(function(complete) {
          var dynamic, relativePath, write;
          dynamic = file.get('dynamic');
          write = file.get('write');
          relativePath = file.get('relativePath');
          if (dynamic || ((write != null) && !write) || !relativePath) {
            return complete();
          } else if (file.writeRendered != null) {
            return file.writeRendered(complete);
          } else if (file.write != null) {
            return file.write(complete);
          } else {
            return complete(new Error('Unknown model in the collection'));
          }
        });
      });
      if (tasks.total) {
        docpad.emitSync('writeBefore', {
          collection: collection,
          templateData: templateData
        }, function(err) {
          if (err) {
            return next(err);
          }
          return tasks.async();
        });
      } else {
        tasks.exit();
      }
      return this;
    };

    DocPad.prototype.getActionArgs = function(opts, next) {
      if (typeof opts === 'function' && (next != null) === false) {
        next = opts;
        opts = {};
      } else {
        opts || (opts = {});
      }
      next || (next = opts.next || null);
      return {
        next: next,
        opts: opts
      };
    };

    DocPad.prototype.action = function(action, opts, next) {
      var actions, tasks, _i, _len, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      actions = action.split(/[,\s]+/g);
      if (actions.length > 1) {
        tasks = new balUtil.Group(next);
        tasks.total = actions.length;
        for (_i = 0, _len = actions.length; _i < _len; _i++) {
          action = actions[_i];
          this.action(action, tasks.completer());
        }
        return this;
      }
      this.log('debug', "Performing the action " + action);
      if (next == null) {
        next = function(err) {
          if (err) {
            return _this.fatal(err);
          }
        };
      }
      switch (action) {
        case 'install':
        case 'update':
          this.install(opts, function(err) {
            return next(err);
          });
          break;
        case 'skeleton':
        case 'scaffold':
          this.skeleton(opts, function(err) {
            return next(err);
          });
          break;
        case 'generate':
          this.generate(opts, function(err) {
            return next(err);
          });
          break;
        case 'clean':
          this.clean(opts, function(err) {
            return next(err);
          });
          break;
        case 'render':
          this.render(opts, function(err, data) {
            return next(err, data);
          });
          break;
        case 'watch':
          this.watch(opts, function(err) {
            return next(err);
          });
          break;
        case 'server':
          this.server(opts, function(err) {
            return next(err);
          });
          break;
        default:
          this.run(opts, function(err) {
            return next(err);
          });
      }
      return this;
    };

    DocPad.prototype.install = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      this.initNodeModules({
        path: this.config.rootPath,
        next: function(err) {
          if (err) {
            return next(err);
          }
          return docpad.loadConfiguration({}, {
            blocking: false
          }, function(err) {
            return next(err);
          });
        }
      });
      return this;
    };

    DocPad.prototype.clean = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      docpad.log('debug', 'Cleaning files');
      docpad.cleanResources();
      balUtil.rmdirDeep(this.config.outPath, function(err, list, tree) {
        if (!err) {
          docpad.log('debug', 'Cleaned files');
        }
        return next();
      });
      return this;
    };

    DocPad.prototype.generatePrepare = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      docpad.block('loading', function(lockError) {
        var _this = this;
        if (lockError) {
          return docpad.fatal(lockError);
        }
        return docpad.start('generating', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          docpad.log('info', 'Generating...');
          docpad.notify((new Date()).toLocaleTimeString(), {
            title: 'Website generating...'
          });
          return docpad.emitSync('generateBefore', {
            server: docpad.getServer()
          }, function(err) {
            return next(err);
          });
        });
      });
      return this;
    };

    DocPad.prototype.generateCheck = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      if (!docpad.hasPlugins()) {
        docpad.log('warn', "DocPad is currently running without any plugins installed. You probably want to install some: https://github.com/bevry/docpad/wiki/Plugins");
      }
      balUtil.exists(docpad.config.srcPath, function(exists) {
        var err;
        if (exists === false) {
          err = new Error('Cannot generate website as the src dir was not found');
          return next(err);
        } else {
          return next();
        }
      });
      return this;
    };

    DocPad.prototype.generateClean = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      docpad.cleanResources();
      next();
      return this;
    };

    DocPad.prototype.generateParse = function(opts, next) {
      var config, database, docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      database = this.getDatabase();
      config = docpad.config;
      this.emitSync('parseBefore', {}, function(err) {
        var tasks;
        if (err) {
          return next(err);
        }
        docpad.log('debug', 'Parsing everything');
        tasks = new balUtil.Group(function(err) {
          if (err) {
            return next(err);
          }
          return docpad.emitSync('parseAfter', {}, function(err) {
            if (err) {
              return next(err);
            }
            docpad.log('debug', 'Parsed everything');
            return next(err);
          });
        });
        _.each(config.documentsPaths, function(documentsPath) {
          return tasks.push(function(complete) {
            return docpad.parseDirectory({
              path: documentsPath,
              collection: database,
              createFunction: docpad.createDocument
            }, complete);
          });
        });
        _.each(config.filesPaths, function(filesPath) {
          return tasks.push(function(complete) {
            return docpad.parseDirectory({
              path: filesPath,
              collection: database,
              createFunction: docpad.createFile
            }, complete);
          });
        });
        _.each(config.layoutsPaths, function(layoutsPath) {
          return tasks.push(function(complete) {
            return docpad.parseDirectory({
              path: layoutsPath,
              collection: database,
              createFunction: docpad.createDocument
            }, complete);
          });
        });
        return tasks.async();
      });
      return this;
    };

    DocPad.prototype.generateRender = function(opts, next) {
      var collection, docpad, templateData, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      templateData = opts.templateData || this.getTemplateData();
      collection = opts.collection || this.getDatabase();
      balUtil.flow({
        object: docpad,
        action: 'contextualizeFiles renderFiles renderFiles writeFiles',
        args: [
          {
            collection: collection,
            templateData: templateData
          }
        ],
        next: function(err) {
          return next(err);
        }
      });
      return this;
    };

    DocPad.prototype.generatePostpare = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      docpad.unblock('loading', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        return docpad.emitSync('generateAfter', {
          server: docpad.getServer()
        }, function(err) {
          if (err) {
            return next(err);
          }
          return docpad.finished('generating', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            docpad.log('info', 'Generated');
            docpad.notify((new Date()).toLocaleTimeString(), {
              title: 'Website generated'
            });
            return next();
          });
        });
      });
      return this;
    };

    DocPad.prototype.generateError = function(err, next) {
      var docpad;
      docpad = this;
      docpad.unblock('loading', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        return docpad.finish('generating', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return next(err);
        });
      });
      return this;
    };

    DocPad.prototype.lastGenerate = null;

    DocPad.prototype.generate = function(opts, next) {
      var docpad, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      if ((opts.reset != null) && opts.reset === false) {
        docpad.generatePrepare(function(err) {
          var database, filesToReload;
          if (err) {
            return docpad.generateError(err, next);
          }
          database = docpad.getDatabase();
          filesToReload = database.findAll({
            mtime: {
              $gte: docpad.lastGenerate
            }
          });
          docpad.lastGenerate = new Date();
          return docpad.loadFiles({
            collection: filesToReload
          }, function(err) {
            var filesToRender;
            if (err) {
              return docpad.generateError(err, next);
            }
            filesToRender = new docpad.FilesCollection();
            filesToRender.add(database.findAll({
              referencesOthers: true
            }).models);
            filesToRender.add(filesToReload.models);
            return docpad.generateRender({
              collection: filesToRender
            }, function(err) {
              if (err) {
                return docpad.generateError(err, next);
              }
              return docpad.generatePostpare({}, function(err) {
                if (err) {
                  return docpad.generateError(err, next);
                }
                return next();
              });
            });
          });
        });
      } else {
        docpad.lastGenerate = new Date();
        balUtil.flow({
          object: docpad,
          action: 'generatePrepare generateCheck generateClean generateParse generateRender generatePostpare',
          args: [opts],
          next: function(err) {
            if (err) {
              return docpad.generateError(err, next);
            }
            return next();
          }
        });
      }
      return this;
    };

    DocPad.prototype.render = function(opts, next) {
      var complete, data, docpad, document, renderFunction, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      data = opts.data || {};
      if (opts.filename) {
        document = this.createDocument({
          filename: opts.filename,
          fullPath: opts.filename,
          data: opts.content
        });
        renderFunction = 'prepareAndRender';
      } else if (opts.document) {
        document = opts.document;
        renderFunction = 'render';
      }
      if (!document) {
        return typeof next === "function" ? next(new Error('You must pass a document to the renderAction')) : void 0;
      }
      complete = function(err) {
        return docpad.finish('render', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return docpad.unblock('loading, generating', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            return next(err, document);
          });
        });
      };
      docpad.block('loading, generating', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        return docpad.start('render', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          docpad[renderFunction](document, data, complete);
        });
      });
      return this;
    };

    DocPad.prototype.watch = function(opts, next) {
      var changeHandler, close, configWatcher, database, docpad, restart, srcWatcher, watch, watchr, _ref;
      watchr = require('watchr');
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      database = this.getDatabase();
      srcWatcher = null;
      configWatcher = null;
      close = function() {
        if (srcWatcher) {
          srcWatcher.close();
          srcWatcher = null;
        }
        if (configWatcher) {
          configWatcher.close();
          return configWatcher = null;
        }
      };
      restart = function(next) {
        var tasks;
        close();
        tasks = new balUtil.Group(next);
        tasks.total = 2;
        srcWatcher = watchr.watch({
          path: docpad.config.srcPath,
          listener: changeHandler,
          next: tasks.completer(),
          ignorePatterns: true
        });
        if (balUtil.existsSync(docpad.config.configPath)) {
          return configWatcher = watchr.watch({
            path: docpad.config.configPath,
            listener: function() {
              return docpad.loadConfiguration({}, {
                blocking: false
              }, function() {
                return changeHandler('config');
              });
            },
            next: tasks.completer()
          });
        } else {
          return tasks.complete();
        }
      };
      changeHandler = function(eventName, filePath, fileCurrentStat, filePreviousStat) {
        var file, performGenerate;
        file = docpad.ensureFileOrDocument({
          fullPath: filePath
        });
        performGenerate = function(opts) {
          if (opts == null) {
            opts = {};
          }
          opts.reset = false;
          return docpad.generate(opts, function(err) {
            if (err) {
              docpad.error(err);
            }
            return docpad.log("Regenerated at " + (new Date().toLocaleTimeString()));
          });
        };
        if (eventName === 'unlink') {
          file.destroy();
          return performGenerate();
        } else if (eventName === 'new' || eventName === 'change') {
          file.setStat(fileCurrentStat);
          return performGenerate();
        }
      };
      watch = function() {
        return docpad.block('loading', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return docpad.start('watching', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            docpad.log('Watching setup starting...');
            return restart(function(err) {
              return docpad.finish('watching', function(lockError) {
                if (lockError) {
                  return docpad.fatal(lockError);
                }
                return docpad.unblock('loading', function(lockError) {
                  if (lockError) {
                    return docpad.fatal(lockError);
                  }
                  docpad.log('Watching setup');
                  return next(err);
                });
              });
            });
          });
        });
      };
      docpad.when('loading:started', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        close();
        return docpad.onceFinished('loading', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return watch();
        });
      });
      docpad.whenFinished('generating:started', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        close();
        return docpad.onceFinished('generating', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return watch();
        });
      });
      watch();
      return this;
    };

    DocPad.prototype.run = function(opts, next) {
      var destinationPath, docpad, runDocpad, srcPath, _ref,
        _this = this;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      srcPath = this.config.srcPath;
      destinationPath = this.config.rootPath;
      runDocpad = function() {
        return balUtil.flow({
          object: docpad,
          action: 'generate server watch',
          args: [opts],
          next: function(err) {
            if (err) {
              return next(err);
            }
          }
        });
      };
      if (balUtil.existsSync(srcPath)) {
        runDocpad();
      } else {
        balUtil.readdir(destinationPath, function(err, files) {
          if (err) {
            return next(err);
          }
          if (files.length) {
            docpad.log('warn', "\nWe couldn't find an existing DocPad project inside your current directory.\nIf you're wanting to use a pre-made skeleton for the basis of your new project, then run DocPad again inside an empty directory.\nIf you're wanting to start your new project from scratch, then refer to the Getting Started guide here:\n	https://github.com/bevry/docpad/wiki/Getting-Started\nFor more information on what this means, visit:\n	https://github.com/bevry/docpad/wiki/Troubleshooting");
            return next();
          } else {
            return _this.skeletonAction(opts, function(err) {
              if (err) {
                return next(err);
              }
              return runDocpad();
            });
          }
        });
      }
      return this;
    };

    DocPad.prototype.skeleton = function(opts, next) {
      var complete, destinationPath, docpad, selectSkeletonCallback, skeletonId, srcPath, useSkeleton, _ref;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      skeletonId = this.config.skeleton;
      srcPath = this.config.srcPath;
      destinationPath = this.config.rootPath;
      selectSkeletonCallback = opts.selectSkeletonCallback || null;
      complete = function(err) {
        return docpad.finish('skeleton', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return docpad.unblock('generating, watching, serving', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            return next(err);
          });
        });
      };
      useSkeleton = function() {
        return docpad.installSkeleton(skeletonId, destinationPath, function(err) {
          if (err) {
            return complete(err);
          }
          return docpad.loadConfiguration({}, {
            blocking: false
          }, function(err) {
            return complete(err);
          });
        });
      };
      docpad.block('generating, watching, serving', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        return docpad.start('skeleton', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return balUtil.exists(srcPath, function(exists) {
            if (exists) {
              docpad.log('warn', "Didn't place the skeleton as the desired structure already exists");
              return complete();
            }
            if (skeletonId) {
              return useSkeleton();
            } else {
              return docpad.getSkeletons(function(err, skeletons) {
                if (err) {
                  return complete(err);
                }
                return selectSkeletonCallback(skeletons, function(err, _skeletonId) {
                  if (err) {
                    return complete(err);
                  }
                  skeletonId = _skeletonId;
                  return useSkeleton();
                });
              });
            }
          });
        });
      });
      return this;
    };

    DocPad.prototype.server = function(opts, next) {
      var complete, config, docpad, express, finish, server, _ref;
      express = require('express');
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      docpad = this;
      config = this.config;
      server = null;
      complete = function(err) {
        return docpad.finish('serving', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return docpad.unblock('loading', function(lockError) {
            if (lockError) {
              return docpad.fatal(lockError);
            }
            return next(err);
          });
        });
      };
      finish = function(err) {
        if (err) {
          return complete(err);
        }
        return docpad.emitSync('serverAfter', {
          server: server
        }, function(err) {
          if (err) {
            return complete(err);
          }
          docpad.log('debug', 'Server setup');
          return complete();
        });
      };
      docpad.block('loading', function(lockError) {
        if (lockError) {
          return docpad.fatal(lockError);
        }
        return docpad.start('serving', function(lockError) {
          if (lockError) {
            return docpad.fatal(lockError);
          }
          return docpad.emitSync('serverBefore', {}, function(err) {
            var address, serverDir, serverHostname, serverLocation, serverPort;
            if (err) {
              return next(err);
            }
            server = docpad.getServer();
            if (!server) {
              server = express.createServer();
              docpad.setServer(server);
            }
            if (!config.extendServer) {
              return complete();
            } else {
              server.configure(function() {
                server.use(express.bodyParser());
                server.use(express.methodOverride());
                server.use(function(req, res, next) {
                  var tools;
                  tools = res.header('X-Powered-By').split(/[,\s]+/g);
                  tools.push('DocPad');
                  tools = tools.join(',');
                  res.header('X-Powered-By', tools);
                  return next();
                });
                server.use(server.router);
                server.use(function(req, res, next) {
                  var cleanUrl, contentRendered, contentTypeRendered, database, document, dynamic, templateData, url;
                  database = docpad.getDatabase();
                  if (!database) {
                    return next();
                  }
                  cleanUrl = req.url.replace(/\?.*/, '');
                  document = database.findOne({
                    urls: {
                      '$in': cleanUrl
                    }
                  });
                  if (!document) {
                    return next();
                  }
                  contentTypeRendered = document.get('contentTypeRendered');
                  url = document.get('url');
                  dynamic = document.get('dynamic');
                  contentRendered = document.get('contentRendered');
                  if (contentTypeRendered) {
                    res.contentType(contentTypeRendered);
                  }
                  if (dynamic) {
                    templateData = docpad.getTemplateData({
                      req: req
                    });
                    return document.render({
                      templateData: templateData
                    }, function(err) {
                      contentRendered = document.get('contentRendered');
                      if (err) {
                        docpad.error(err);
                        return res.send(err.message, 500);
                      } else {
                        return res.send(contentRendered);
                      }
                    });
                  } else {
                    if (contentRendered) {
                      return res.send(contentRendered);
                    } else {
                      return next();
                    }
                  }
                });
                if (config.maxAge) {
                  server.use(express["static"](config.outPath, {
                    maxAge: config.maxAge
                  }));
                } else {
                  server.use(express["static"](config.outPath));
                }
                return server.use(function(req, res, next) {
                  return res.send(404);
                });
              });
              try {
                server.listen(config.port);
                address = server.address();
                if (address == null) {
                  throw new Error("Could not start the web server, chances are the desired port " + config.port + " is already in use");
                }
                serverHostname = address.address === '0.0.0.0' ? 'localhost' : address.address;
                serverPort = address.port;
                serverLocation = "http://" + serverHostname + ":" + serverPort + "/";
                serverDir = config.outPath;
                docpad.log('info', "DocPad listening to " + serverLocation + " on directory " + serverDir);
                return finish();
              } catch (err) {
                return complete(err);
              }
            }
          });
        });
      });
      return this;
    };

    return DocPad;

  })(EventSystem);

  module.exports = {
    DocPad: DocPad,
    require: function(path) {
      return require(__dirname + '/' + path);
    },
    createInstance: function(config, next) {
      return new DocPad(config, next);
    }
  };

}).call(this);
